.TH uic 1 "2 Aug 2001" "Nokia Corporation and/or its subsidiary(-ies)" \" -*- nroff -*-
.\"
.\" Copyright (C) 2015 The Qt Company Ltd.
.\" Contact: http://www.qt.io/licensing/
.\"
.\" This file is part of the QtGui module of the Qt Toolkit.
.\"
.\" $QT_BEGIN_LICENSE:LGPL$
.\" Commercial License Usage
.\" Licensees holding valid commercial Qt licenses may use this file in
.\" accordance with the commercial license agreement provided with the
.\" Software or, alternatively, in accordance with the terms contained in
.\" a written agreement between you and The Qt Company. For licensing terms
.\" and conditions see http://www.qt.io/terms-conditions. For further
.\" information use the contact form at http://www.qt.io/contact-us.
.\"
.\" GNU Lesser General Public License Usage
.\" Alternatively, this file may be used under the terms of the GNU Lesser
.\" General Public License version 2.1 as published by the Free Software
.\" Foundation and appearing in the file LICENSE.LGPL included in the
.\" packaging of this file.  Please review the following information to
.\" ensure the GNU Lesser General Public License version 2.1 requirements
.\" will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
.\"
.\" As a special exception, The Qt Company gives you certain additional
.\" rights. These rights are described in The Qt Company LGPL Exception
.\" version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
.\"
.\" GNU General Public License Usage
.\" Alternatively, this file may be used under the terms of the GNU
.\" General Public License version 3.0 as published by the Free Software
.\" Foundation and appearing in the file LICENSE.GPL included in the
.\" packaging of this file.  Please review the following information to
.\" ensure the GNU General Public License version 3.0 requirements will be
.\" met: http://www.gnu.org/copyleft/gpl.html.
.\"
.\"
.\" $QT_END_LICENSE$
.\"
.SH NAME
uic \- Qt user interface compiler
.SH SYNOPSIS
.B uic
[options] file
.SH DESCRIPTION
This page documents the
.B User Interface Compiler
for the Qt GUI toolkit. The
.B uic
reads a user interface definition (.ui) file in XML as generated by
.I Qt Designer
and creates corresponding C++ header or source files. It also
generates an image file that embeds raw image data in C++ source code.
.PP
.PP
Generate declaration:
.br
.I "\fB	uic  [options]  \fI<file>"
.br
.PP
Generate implementation:
.br
.I "\fB	uic  [options] -impl \fI<headerfile> <file>"
.br
        \fI<headerfile>\fP:    name of the declaration file
.br
.PP
Generate image collection:
.br
.I "\fB	uic  [options] -embed \fI<project> <image1> <image2> <image3>\fP ..."
.br
        \fI<project>\fP:       project name
        \fI<image[1..n]>\fP:   image files
.br
.\" .PP
.\" Generate binary UI file:
.\" .br
.\" .I "\fB	uic  [options] -binary \fI<file>"
.\" .br
.PP
.PP
For convenience,
.B uic
can also generate declaration or implementation stubs for subclasses.
.PP
Generate subclass declaration:
.br
.I "\fB	uic  [options] -subdecl \fI<subclassname> <baseclassheaderfile> <file>"
.br
        \fI<subclassname>\fP:     name of the subclass to generate
.br
        \fI<baseclassheaderfile>\fP:    declaration file of the baseclass
.PP
Generate subclass implementation:
.br
.I "\fB	uic  [options] -subimpl \fI<subclassname> <subclassheaderfile> <file>"
.br
        \fI<subclassname>\fP:     name of the subclass to generate
.br
        \fI<subclassheaderfile>\fP:    declaration file of the subclass

.SH GENERAL OPTIONS
.TP
.I "-o file"
Write output to
.I file
rather than to stdout.
.TP
.I "-nofwd"
Omit forward declarations of custom classes in the generated
header file. This is necessary if typedef classes are used.
.TP
.I "-tr func"
Use
.I func()
instead of tr() for internationalization.
.TP
.I "-version"
Display the version of
.B uic
and exit.

.SH USAGE
.B uic
is almost always invoked by
.BR make (1),
rather than by hand.
.PP
Here are useful makefile rules if you only use GNU make:
.PP
.in +4
%.h: %.ui
.br
        uic $< -o $@
.br
%.cpp: %.ui
.br
        uic -impl $*.h $< -o $@
.in -4
.PP
If you want to write portably, you can use individual rules of the
following form:
.PP
.in +4
NAME.h: NAME.ui
.br
        uic $< -o $@
.br
NAME.cpp: NAME.ui
.br
        uic -impl $*.h $< -o $@
.in -4
.PP
You must also remember to add
.I NAME.cpp
to your SOURCES (substitute your favorite name) variable and
.I NAME.o
to your OBJECTS variable.
.PP
(While we prefer to name our C++ source files .cpp, the
.B uic
doesn't care, so you can use .C, .cc, .CC, .cxx or even .c++ if
you prefer.)
.PP
.SH "SEE ALSO"
.BR http://www.trolltech.com/ " "
.SH AUTHOR
Trolltech AS <info@trolltech.com>
