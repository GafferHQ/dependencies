/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example painting/svgviewer
    \title SVG Viewer Example

    \brief The SVG Viewer example shows how to add SVG viewing support to applications.

    \image svgviewer-example.png

    Scalable Vector Graphics (SVG) is an XML-based language for describing two-dimensional
    vector graphics. Qt provides classes for rendering and displaying SVG drawings in
    widgets and on other paint devices. This example allows the user to load SVG files
    and view them in a QGraphicsView using a QGraphicsSvgItem. Based on the selected
    renderer the QGraphicsView uses either a QWidget or QGLWidget as its viewport. A
    third render mode is also provided, where the QGraphicsView draws indirectly though
    a QImage. This allows testing of drawing accuracy and performance for both the 
    native, raster, and OpenGL paint engines.

    See the QtSvg module documentation for more information about SVG and Qt's SVG classes.
*/
