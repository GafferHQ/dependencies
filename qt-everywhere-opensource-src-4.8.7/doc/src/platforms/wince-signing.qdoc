/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page windowsce-signing.html
    \ingroup qtce
    \title Windows CE - Signing
    \brief How to sign Qt projects for use with Windows CE.

    \section1 Signing on Windows CE

Windows CE provides a security mechanism to ask the user to confirm
that they want to use an application/library that is unknown to the
system. This process gets repeated for each dependency of an 
application, meaning each library the application links to, which is
not recognized yet.

To simplify this process you can use signatures and certificates. A 
certificate gets installed on the device and each file which is
signed with the according certificate can be launched without the
security warning.

If you want to use signatures for your project written in Qt,
configure provides the \c -signature option. You need to specify the
location of the .pfx file and qmake adds the signing step to the
build rules.

If you need to select a separate signature for a specific project,
or you only want to sign a single project, you can use the 
"SIGNATURE_FILE = foo.pfx" rule inside the project file.

The above described rules apply for command line makefiles as well as
Visual Studio projects generated by qmake.

Microsoft usually ships development signatures inside the SDK packages.
You can find them in the Tools subdirectory of the SDK root folder.

Example:

\list
\o Calling configure with signing enabled:
\code
configure.exe -platform win32-msvc2005 -xplatform wincewm50pocket-msvc2005 -signature C:\some\path\SDKSamplePrivDeveloper.pfx
\endcode

\o Using pro file to specify signature
\code
...
TARGET = foo

wince*: {
   SIGNATURE_FILE = somepath\customSignature.pfx
}
...
\endcode
\endlist

*/
