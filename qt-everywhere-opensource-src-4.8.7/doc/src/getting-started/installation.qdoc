/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\group installation
\title Installation
\brief Installing Qt on supported platforms.

The installation procedure is different on each Qt platform. This page provides
information on how to install Qt, as well as software and hardware requirements
for using Qt on each of the supported platforms. Please follow the instructions
for your platform from the following list.

\generatelist{related}

*/

/*! \page install-x11.html
\title Installing Qt for X11 Platforms
\ingroup installation
\brief How to install Qt on platforms with X11.
\previouspage Installation

\tableofcontents

    Qt for X11 has some requirements that are given in more detail
    in the \l{Qt for X11 Requirements} document.

\section1 Step 1: Installing the License File (commercial editions only)
    If you have the commercial edition of Qt, install your license
    file as \c{$HOME/.qt-license}.

    For the open source version you do not need a license file.

\section1 Step 2: Unpacking the Archive
    Unpack the archive if you have not done so already. For example,
    if you have the \c{qt-everywhere-opensource-src-4.8.7.tar.gz}
    package, type the following commands at a command line prompt:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 0

    This creates the directory \c{/tmp/qt-everywhere-opensource-src-4.8.7}
    containing the files from the archive. We only support the GNU version of
    the tar archiving utility. Note that on some systems it is called gtar.

\section1 Step 3: Building the Library

    To configure the Qt library for your machine type, run the
    \c{./configure} script in the package directory.

    By default, Qt is configured for installation in the
    \c{/usr/local/Trolltech/Qt-4.8.7} directory, but this can be
    changed by using the \c{-prefix} option.

\snippet doc/src/snippets/code/doc_src_installation.qdoc 1

    Type \c{./configure -help} to get a list of all available options.
    The \l{Configuration Options for Qt} page gives a brief overview
    of these.

    To create the library and compile all the demos, examples, tools,
    and tutorials, type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 2

    If \c{-prefix} is outside the build directory, you need to install
    the library, demos, examples, tools, and tutorials in the appropriate
    place. To do this (as root if necessary), type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 3

    Note that on some systems the make utility is named differently,
    e.g. gmake. The configure script tells you which make utility to
    use.

    \bold{Note:} If you later need to reconfigure and rebuild Qt from the
    same location, ensure that all traces of the previous configuration are
    removed by entering the build directory and typing \c{make confclean}
    before running \c configure again.

\section1 Step 4: Set the Environment Variables

    In order to use Qt, some environment variables needs to be
    extended.

\snippet doc/src/snippets/code/doc_src_installation.qdoc 4

    This is done like this:

    In \c{.profile} (if your shell is bash, ksh, zsh or sh), add the
    following lines:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 5

    In \c{.login} (in case your shell is csh or tcsh), add the following line:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 6

    If you use a different shell, please modify your environment
    variables accordingly.

    For compilers that do not support rpath you must also extended the
    \c LD_LIBRARY_PATH environment variable to include
    \c{/usr/local/Trolltech/Qt-4.8.7/lib}. On Linux with GCC this step
    is not needed.

\bold {That's all. Qt is now installed.}

\section1 Qt Demos and Examples

    If you are new to Qt, we suggest that you take a look at the demos
    and examples to see Qt in action. Run the Qt Examples and Demos
    either by typing \c qtdemo on the command line or through the
    desktop's Main menu.

    You might also want to try the following links:

    \list
    \o \l{Configuring Qt}
    \o \l{How to Learn Qt}
    \o \l{Tutorials}
    \o \l{Developer Network}
    \o \l{Deploying Qt Applications}
    \endlist

    We hope you will enjoy using Qt. Good luck!

*/

/*!
\page install-win.html
\title Installing Qt for Windows
\ingroup installation
\brief How to install Qt on Windows.
\previouspage Installation

\tableofcontents

    Qt for Windows has some requirements that are given in more detail
    in the \l{Qt for Windows Requirements} document.

    If you have obtained a binary package for this platform,
    consult the installation instructions provided instead of the ones in
    this document.

    Open Source Versions of Qt is not officially supported for use with
    any version of Visual Studio. Integration with Visual Studio is available
    as part of the \l{Qt Commercial Edition}.

\section1 Step 1: Install the License File (commercial editions only)

    If you have the commercial edition of Qt, copy the license file
    from your account on dist.trolltech.com into your home directory
    (this may be known as the \c userprofile environment variable) and
    rename it to \c{.qt-license}. This renaming process must be done
    using a \e{command prompt} on Windows, \bold{not} with Windows Explorer.
    For example on Windows 2000, \c{%USERPROFILE%} should be something
    like \c{C:\Documents and Settings\username}

    For the open source version you do not need a license file.

\section1 Step 2: Unpack the Archive

    Uncompress the files into the directory you want Qt installed;
    e.g. \c{C:\Qt\4.8.7}.

    \note The install path must not contain any spaces or Windows specific
    file system characters.

\section1 Step 3: Set the Environment variables

    In order to build and use Qt, the \c PATH environment variable needs to be
    extended:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 7

    This is done by adding \c{c:\Qt\4.8.7\bin} to the \c PATH variable.

    For newer versions of Windows, \c PATH can be extended through
    the \menu{Control Panel|System|Advanced|Environment variables} menu.

    You may also need to ensure that the locations of your compiler and
    other build tools are listed in the \c PATH variable. This will depend
    on your choice of software development environment.

    \note If you don't use the configured shells, which is
    available in the application menu, in the \l{Open Source Versions of Qt},
    \c configure requires that \c sh.exe is not in the path
    or that it is run from \c msys. This also goes for mingw32-make.

\section1 Step 4: Build the Qt Library


    To configure the Qt library for your machine, type the following command
    in a \bold{Visual Studio} command prompt:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 8

    Type \c{configure -help} to get a list of all available options. The
    \l{Configuration Options for Qt} page gives a brief overview of these.

    If you have multiple compilers installed, and want to build the Qt library
    using a specific compiler, you must specify a \c qmake specification.
    This is done by pasing \c{-platform <spec>} to configure; for example:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 9

    In some cases you need to set up the compilation environment before running
    configure in order to use the right compiler. For instance, you need to do this
    if you have Visual Studio 2005 installed and want to compile Qt using the x64
    compiler because the 32-bit and 64-bit compiler both use the same
    \c qmake specification file.
    This is usually done by selecting
    \menu{Microsoft Visual Studio 2005|Visual Studio Tools|<Command Prompt>}
    from the \gui Start menu.

    The actual commands needed to build Qt depends on your development
    system. For Microsoft Visual Studio to create the library and
    compile all the demos, examples, tools and tutorials type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 10

    \note If you later need to reconfigure and rebuild Qt from the
    same location, ensure that all traces of the previous configuration are
    removed by entering the build directory and typing \c{nmake distclean}
    before running \c configure again.

\bold{That's all. Qt is now installed.}

\section1 Qt Demos and Examples

    If you are new to Qt, we suggest that you take a look at the demos
    and examples to see Qt in action. Run the Qt Examples and Demos
    either by typing \c qtdemo on the command line or through the
    desktop's Start menu.

    You might also want to try the following links:

    \list
    \o \l{How to Learn Qt}
    \o \l{Tutorials}
    \o \l{Developer Network}
    \o \l{Deploying Qt Applications}
    \endlist

    We hope you will enjoy using Qt. Good luck!

*/

/*! \page install-mac.html
\title Installing Qt for Mac OS X
\ingroup installation
\brief How to install Qt on Mac OS X.
\previouspage Installation
\tableofcontents

Qt for Mac OS X has some requirements that are given in more detail
in the \l{Qt for Mac OS X Requirements} document.

The following instructions describe how to install Qt from the source package.

For the binary package, simply double-click on the Qt.mpkg
and follow the instructions to install Qt. You can later run the \c{uninstall-qt.py}
script to uninstall the binary package. The script is located in /Developer/Tools and
must be run as root.

\note Do not run the iPhone simulator while installing Qt. The
\l{http://openradar.appspot.com/7214991}
{iPhone simulator conflicts with the package installer}.

\section1 Step 1: Install the License File (commercial editions only)
    If you have the commercial edition of Qt, install your license
    file as \c{$HOME/.qt-license}.

    For the open source version you do not need a license file.

    Unpack the archive if you have not done so already. For example,
    if you have the \c{qt-everywhere-opensource-src-4.8.7.tar.gz}
    package, type the following commands at a command line prompt:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 11

    This creates the directory \c{/tmp/qt-everywhere-opensource-src-4.8.7}
    containing the files from the archive.

\section1 Step 2:  Build the Qt Library

    To configure the Qt library for your machine type, run the
    \c{./configure} script in the package directory.

    By default, Qt is configured for installation in the
    \c{/usr/local/Trolltech/Qt-4.8.7} directory, but this can be
    changed by using the \c{-prefix} option.

\snippet doc/src/snippets/code/doc_src_installation.qdoc 12

    Type \c{./configure -help} to get a list of all available options.

    Note that you will need to specify \c{-universal} if you want to
    build universal binaries, and also supply a path to the \c{-sdk}
    option if your development machine has a PowerPC CPU. By default,
    Qt is built as a framework, but you can built it as a set of
    dynamic libraries (dylibs) by specifying the \c{-no-framework}
    option.

    Qt can also be configured to be built with debugging symbols. This
    process is described in detail in the \l{Debugging Techniques}
    document.

    To create the library and compile all the demos, examples, tools,
    and tutorials, type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 13

    If \c{-prefix} is outside the build directory, you need to install
    the library, demos, examples, tools, and tutorials in the appropriate
    place. To do this, type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 14

    This command requires that you have administrator access
    on your machine.

    \note There is a potential race condition when running make install with multiple
    jobs. It is best to only run one make job (-j1) for the install.

    If you later need to reconfigure and rebuild Qt from the
    same location, ensure that all traces of the previous configuration are
    removed by entering the build directory and typing \c{make confclean}
    before running \c configure again.

\section1 Step 3: Set the Environment variables

    In order to use Qt, some environment variables need to be
    extended.

\snippet doc/src/snippets/code/doc_src_installation.qdoc 15

    This is done like this:

    In \c{.profile} (if your shell is bash), add the following lines:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 16

    In \c{.login} (in case your shell is csh or tcsh), add the following line:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 17

    If you use a different shell, please modify your environment
    variables accordingly.

\bold {That's all. Qt is now installed.}

\section1 Qt Demos and Examples
    If you are new to Qt, we suggest that you take a look at the demos
    and examples to see Qt in action. Run the Qt Examples and Demos
    either by typing \c qtdemo on the command line or through the
    desktop's Start menu.

    You might also want to try the following links:

    \list
    \o \l{How to Learn Qt}
    \o \l{Tutorials}
    \o \l{Developer Network}
    \o \l{Deploying Qt Applications}
    \endlist

    We hope you will enjoy using Qt. Good luck!

*/

/*! \page install-wince.html
\title Installing Qt for Windows CE
\ingroup installation
\ingroup qtce
\brief How to install Qt for Windows CE.
\previouspage Installation
\tableofcontents

Qt for Windows CE has some requirements that are given in more detail
in the \l{Qt for Windows CE Requirements} document.

\section1 Step 1: Install the License File (commercial editions only)
    Uncompress the files into the directory you want to install Qt into;
    e.g., \c{C:\Qt\4.8.7}.

    \note The install path must not contain any spaces.

\section1 Step 2: Set the Environment variables

    In order to build and use Qt, the \c PATH environment variable needs
    to be extended:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 18
    This is done by adding \c{c:\Qt\4.8.7\bin} to the \c PATH variable.

    For newer versions of Windows, \c PATH can be extended through
    "Control Panel->System->Advanced->Environment variables" and for
    older versions by editing \c{c:\autoexec.bat}.

    Make sure the enviroment variables for your compiler are set.
    Visual Studio includes \c{vcvars32.bat} for that purpose - or simply
    use the "Visual Studio Command Prompt" from the Start menu.

\section1 Step 3: Configure Qt

    To configure Qt for Windows Mobile 5.0 for Pocket PC, type the
    following:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 19

    If you want to configure Qt for another platform or with other
    options, type \c{configure -help} to get a list of all available
    options. The \l{Configuration Options for Qt} page gives a brief
    overview of these. See the \c README file for the list of supported
    platforms.

\section1 Step 4: Build Qt Library

    Now, to build Qt you first have to update your \c PATH, \c INCLUDE
    and \c LIB paths to point to the correct resources for your target
    platforms. For a default installation of the Windows Mobile 5.0
    Pocket PC SDK, this is done with the following commands:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 20

    We provide a convenience script for this purpose, called \c{setcepaths}.
    Simply type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 21

    Then to build Qt type:

    \snippet doc/src/snippets/code/doc_src_installation.qdoc 22

\bold{That's all. Qt is now installed.}

\section1 Qt Demos and Examples

    To get started with Qt, you can check out the examples found in the
    \c{examples} directory of your Qt installation. The documentation can
    be found in \c{doc\html}.

    \note If you reconfigure Qt for a different platform,
    make sure you start with a new clean console to get rid of the
    platform dependent include directories.

    The links below provide further information for using Qt:
    \list
    \o \l{How to Learn Qt}
    \o \l{Tutorials}
    \o \l{Developer Network}
    \o \l{Deploying Qt Applications}
    \endlist

    You might also want to try the following Windows CE specific links:
    \list
    \o \l{Windows CE - Introduction to using Qt}
    \o \l{Windows CE - Working with Custom SDKs}
    \o \l{Windows CE - Using shadow builds}
    \o \l{Windows CE - Signing}
    \endlist

    Information on feature and performance tuning for embedded builds can
    be found on the following pages:
    \list
    \o \l{Fine-Tuning Features in Qt}
    \o \l{Qt Performance Tuning}
    \endlist

    We hope you will enjoy using Qt. Good luck!
*/

/*! \page install-Symbian-installer.html
\title Installing Qt for the Symbian platform from a Binary Package
\ingroup qtsymbian
\brief How to install Qt for the Symbian platform from a binary package.
\previouspage Installation

\tableofcontents

    Qt for Symbian binary packages (SIS files) are available from the \l
    {http://qt.nokia.com/downloads}{Qt SDK}.

*/
/*! \page install-Symbian.html
\title Installing Qt for the Symbian Platform
\ingroup installation
\ingroup qtsymbian
\brief How to install Qt for the Symbian platform.
\previouspage Installation
\tableofcontents

    \l {http://qt.nokia.com/downloads}{Qt SDK} provides all the necessary tools
    and libraries for developing Qt applications. However, if you want to build
    Qt itself for Symbian, follow the instructions below.

Qt for the Symbian platform has some requirements that are given in more detail
in the \l{Qt for the Symbian platform Requirements} document.

This document describes how to install and configure Qt for
the Symbian platform from scratch.

\section1 Step 1: Set Up the Development Environment

    Make sure your Symbian development environment is correctly installed
    and patched as explained in the \l{Qt for the Symbian platform Requirements}
    document.

    After you have finished the Symbian development environment setup, it is
    good to verify that environment is functional for example by compiling one
    of the pure Symbian examples for both emulator and HW. This can be done from
    command prompt as follows:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 32

    If all steps pass without errors your Symbian development environment is
    very likely installed correctly.

\section1 Step 2: Install Qt

    Uncompress the \l{http://qt.nokia.com/downloads}{downloaded} source
    package into the directory you want Qt installed, e.g. \c{C:\Qt\4.8.7}.

    \note Qt must be installed on the same drive as the Symbian SDK you are
    using, and the install path must not contain any spaces.

\section1 Step 3: Set the Environment variables

    In order to build and use Qt, the \c PATH environment variable needs
    to be extended:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 18

    This is done by adding \c{c:\Qt\4.8.7\bin} to the \c PATH variable.

    On Windows the\c PATH can be extended by navigating to
    "Control Panel->System->Advanced->Environment variables".

    In addition, you must configure the environment for use with the Symbian
    emulator. This is done by locating the Carbide.c++ submenu on the Start
    menu, and choosing "Configure environment for WINSCW command line".

    If you are planning to use \c abld (the default build system that comes with
    the S60 SDK) to build Qt, you will also need to set the following
    environment variable:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 33

    This is not necessary for other applications, only when building Qt.

\section1 Step 4: Configure Qt

    To configure Qt for the Symbian platform, do:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 23
    (to build the tools using MinGW, and the libraries using abld)

    \bold or

\snippet doc/src/snippets/code/doc_src_installation.qdoc 31
    (to build the tools using MinGW, and the libraries using SBSv2)

    Type \c{./configure -help} to get a list of all available options.
    The \l{Configuration Options for Qt} page gives a brief overview
    of these.

    SBSv2 (also known as \l{http://projects.developer.nokia.com/raptor/wiki} {Raptor})
    is a next-generation Symbian build system. SBSv2 is not officially supported
    by any of the S60 SDKs currently available from Forum Nokia.

\section1 Step 5: Build Qt

    To build Qt for the emulator, type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 24

    To build Qt for the device, type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 28

    Congratulations, Qt is now ready to use.

\section1 Step 7: Installing Qt Libraries on the Device

    To run a Qt application on a device, it must have Qt libraries installed.

    Symbian devices have a pre-installed Qt as follows:
    \list
    \o Symbian Anna devices have the pre-installed Qt, Qt Mobility, and Qt Webkit.
    \o Symbian Belle and later devices have the pre-installed Qt on the device firmware.
    \endlist

    \l {http://www.developer.nokia.com/Community/Wiki/Nokia_Smart_Installer_for_Symbian}
    {Nokia Smart Installer for Symbian} deploys the required Qt libraries to supported S60
    and Symbian devices if the libraries are not pre-installed.

    Nokia Developer site's \l {http://www.developer.nokia.com/Devices/Device_specifications/?filter1=qt}
    {Device specifications} provide information on which devices have a
    pre-installed Qt and the used Qt version.

    To create your own Qt installation package, do as follows:

    \snippet doc/src/snippets/code/doc_src_installation.qdoc 29

    The Qt libraries are built with "All -Tcb" capability, so they can support
    all types of applications. If you don't have a suitable certificate, you can
    patch the binaries in either of the following ways:

    \list
    \o If you have no certificate, build a self-signed Qt:
    \snippet doc/src/snippets/code/doc_src_installation.qdoc 34

    \o If you have a symbian-signed developer certificate, specify the
    capabilities you can sign for, for example:
    \snippet doc/src/snippets/code/doc_src_installation.qdoc 35
    \endlist

\section1 Running Qt demos

    We've included a subset of the Qt demos in this package for you
    to try out. An excellent starting point is the "fluidlauncher"
    demo.

    Similarly, install fluidlauncher to the device:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 30

    This will create a self-signed \c fluidlauncher.sis and
    install it to your device.

    To run the demos on the emulator simply navigate to the directory of the demo
    you want to see and run:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 27

    For more information about building and running Qt programs on the
    Symbian platform, see \l{The Symbian platform - Introduction to Qt}.
    We hope you will enjoy using Qt.

*/
/*! \page install-symbian-linux.html
\title Installing Qt for the Symbian platform using Linux (experimental)
\ingroup installation
\ingroup qtsymbian
\brief How to install Qt for the Symbian platform using Linux.
\previouspage Installation
\tableofcontents

This document describes how to install and configure Qt for
the Symbian platform from scratch, using Linux as the build host.
Qt for Symbian binaries can be downloaded directly so development of
applications using Qt for Symbian can start right away.

\section1 Step 1: Setup the Development Environment

Qt for the Symbian platform has some requirements on the development
platform. The Symbian SDK for Linux as well as a cross compiler for the ARM
processor used on Symbian devices should be present on the development
machine.

See \l{http://qt.gitorious.org/qt/pages/QtCreatorSymbianLinux} for more details.


\section1 Step 2: Unpack the Archive

Uncompress the \l{http://qt.nokia.com/downloads}{downloaded} source package into the
directory you want Qt installed, e.g. \c{/home/user/qt/4.8.7}.


\section1 Step 3: Set the Environment Variables

In order to build and use Qt, the \c PATH environment variable needs
to be extended to fine Qt tools and also to find the Symbian platform tools:

First you need to set the \c EPOCROOT environment variable to point to the
location of your S60 SDK:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 36

Then you can update the PATH variable;

\snippet doc/src/snippets/code/doc_src_installation.qdoc 37


\section1 Step 4: Configure Qt

To configure Qt for the Symbian platform, do:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 38

to build the libraries using RVCT or

\snippet doc/src/snippets/code/doc_src_installation.qdoc 39

to build the libraries using GCCE.

Type \c{./configure -help} to get a list of all available options.
The \l{Configuration Options for Qt} page gives a brief overview
of these.

\section1 Step 5: Build Qt

To build Qt for the device, type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 40

Congratulations, Qt is now ready to use.


\section1 Step 6: Building Qt Packages for the Device

To run any application or demo on a real device, you need to install it
on the device. To do this you first have to create a a package for the
device, containing the libraries:

\bold{Building a Qt package without a certificate}

If you have no certificate, build a self signed Qt:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 41

The Qt libraries are built with "All -Tcb" capability, so that
they can support all types of applications. However, these
capabilities are automatically lowered if you make a self-signed
package.

\bold{Building a Qt package with a Symbian developer certificate}

If you have a Symbian-signed developer certificate, specify the
capabilities you can sign for, for example:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 42

\section2 Installing Qt Packages to the Device.

It is possible to install packages to a phone in Linux by putting
the package on the phone memory card and then installing manually
from the phone menu. However, this is tedious and will not work
on phones without a memory card, so the method recommended by Qt is
to use the App TRK tool.

\section3 Obtaining the App TRK package.

Download the package from the following location.

\list
\o \l{http://tools.ext.nokia.com/trk/}{Application TRK}.
   Choose the correct installation package based on the
   S60 version of your device
   (\c{S60_<S60-version>_app_trk_<TRK-version>.sisx}).
\endlist

This package currently has to be installed by putting the
package on the memory card and installing from the phone
menu, or using a Windows PC for doing the install. However,
the installation only has to be done once.

\section3 Configuring App TRK on the Phone

When App TRK is installed, connect the phone to the PC using
the USB cable. Select "PCSuite" as connection type. Then run
App TRK on the phone, and make sure that the connection type is
USB. This can be changed under the \c Settings menu entry.
If necessary, choose \c Connect from the menu.

\section3 Configuring the USB Serial Driver on the Linux System

On Linux, phone should appear as the \c /dev/ttyUSB1 device,
however if you are running an old kernel, you may need to
force the USB module to be loaded correctly before the device
will appear:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 43

Note the identifier on the line where your Symbian device
appears. Then execute the following, using the first and
second part of the identifier in place of \c XXX,
respectively.

\snippet doc/src/snippets/code/doc_src_installation.qdoc 44

The \c rmmod step may fail if the module is not already
loaded, but that is harmless.

\section3 Building the runonphone Tool.

Note that building the \c runonphone tool requires a separate
installation of Qt for Linux. If there is a version of Qt
installed by your distribution's package mechanism, that that
should do fine. Some distributions separate the libraries from
the development setup which includes \c qmake. Make sure you
have both installed.

You will also need the \l{libusb} libraries and header files
installed. Usually, installing a development package such as
\c{libusb-dev} will ensure that you have all the necessary
dependencies installed.

First, make sure that the \c qmake you use is taken from the
Linux installation of Qt. The easiest way to make sure of this
is to open a new shell and run the following command:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 45

\c qmake will tell you where it is installed.

Copy the \c{%QTDIR%/tools/runonphone} folder to a place outside
of the Qt tree. Then go to the folder in a shell and build it:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 46

Copy the resulting executable to a folder which is in your
\c PATH environment variable.

\section3 Installing the Built Package onto the Phone

\note Before starting, please make sure that there is no previously
installed version of Qt on the phone.

Return to the root of the Qt tree configured for Symbian. Then
install the Qt libraries by running the following:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 47

You may need to supply the path of the serial device file using
the \c{-p} option:

\snippet doc/src/snippets/code/doc_src_installation.qdoc runonphone with device file path

If the installation fails, please make sure that there is
no previously installed version of Qt on the phone.

Qt requires some dependent packages to be installed on the device,
which can be installed using the runonphone tool as well. One is
the \c{sqlite3.sis}, which is included in the Qt distribution, while
the others are shipped with the Symbian SDK. The required packages
can be found from the following locations:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 50

It is also possible to install packages onto the device using the
\c runonphone build rule that \c qmake automatically generates for
each Qt project. Options can be supplied to the \c runonphone tool
that is invoked begind the scenes:

\snippet doc/src/snippets/code/doc_src_installation.qdoc make runonphone with options

If you are running \c runonphone or invoking the \c runonphone
build rule often, it is possible to set the \c QT_RUN_ON_PHONE_OPTIONS
environment variable with the options you normally use:

\snippet doc/src/snippets/code/doc_src_installation.qdoc make runonphone with preset environment variable

This makes installation of packages onto a device easier and less
error-prone.


\section1 Running Qt Demos

We've included a subset of the Qt demos in this package for you
to try out. An excellent starting point is the "fluidlauncher"
demo.

Install and run the demo by using the following commands:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 48

The same command can be used for other applications:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 49

For more information about building and running Qt programs on the
Symbian platform, see \l{The Symbian platform - Introduction to Qt}.

We hope you will enjoy using Qt.
*/

/*!
    \page requirements.html
    \title General Qt Requirements
    \ingroup installation
    \brief Outlines the general requirements and dependencies needed to install Qt.

    This page describes the specific requirements of libraries and components on which
    Qt depends. For information about installing Qt, see the \l{Installation} page.

    For information about the platforms that Qt supports, see the \l{Supported Platforms}
    page.

    \section1 OpenSSL (version 0.9.7 or later)

    Support for \l{SSL}{Secure Sockets Layer (SSL)} communication is provided by the
    \l{OpenSSL Toolkit}, which must be obtained separately. More information about
    enabling SSL support can be found in the \l{Secure Sockets Layer (SSL) Classes}
    document.

    \section1 Platform-Specific Requirements

    Each platform has its own specific set of dependencies. Please see the relevant
    page for more details about the components that are required to build and install
    Qt on your platform.

    \list
    \o \l{Qt for Embedded Linux Requirements}
    \o \l{Qt for Mac OS X Requirements}
    \o \l{Qt for the Symbian platform Requirements}
    \o \l{Qt for Windows CE Requirements}
    \o \l{Qt for Windows Requirements}
    \o \l{Qt for X11 Requirements}
    \endlist
*/

/*!
    \page requirements-win.html
    \title Qt for Windows Requirements
    \ingroup installation
    \brief Setting up the Windows environment for Qt.
    \previouspage General Qt Requirements

    If you are using a binary version of Qt with Visual Studio 2005, you must
    first install the Visual Studio Service Pack 1 available
    \l{http://www.microsoft.com/downloads/details.aspx?FamilyId=BB4A75AB-E2D4-4C96-B39D-37BAF6B5B1DC&amp;displaylang=en}{here}
    to avoid runtime conflicts.
    Additionally, you must use the Check for Updates feature in the Help menu of the Visual Studio 2005 IDE to apply at least the following security updates: KB937061, KB971023, KB971090, KB973673.

    If you are using a source edition of Qt, you must first install Perl so
    that the syncqt script invoked by configure can be executed. You can download
    this \l{http://www.activestate.com/downloads/}{here}.

    To build Qt with Phonon on Windows, you require:

    \list
        \o Microsoft's DirectX Software Development Kit which can be
        downloaded
        \l{http://msdn2.microsoft.com/en-us/directx/aa937788.aspx}{here}, and
        \o Microsoft's Windows Server 2003 R2 Platform SDK which is available
        \l{http://www.microsoft.com/downloads/details.aspx?FamilyID=0baf2b35-c656-4969-ace8-e4c0c0716adb&amp;DisplayLang=en}{here}.
    \endlist

    \sa {Known Issues}
*/

/*!
    \page requirements-mac.html
    \title Qt for Mac OS X Requirements
    \ingroup installation
    \brief Setting up the Mac OS X environment for Qt.
    \previouspage General Qt Requirements

    Qt requires Xcode to be installed on the system. Xcode should be
    available on the Mac installation CD.

    \sa {Known Issues}
*/

/*!
    \page requirements-x11.html
    \title Qt for X11 Requirements
    \ingroup installation
    \brief Setting up the X11 environment for Qt.
    \previouspage General Qt Requirements

    \tableofcontents

    \section1 QtGui Dependencies

    \image x11_dependencies.png Qt for X11 Dependencies

    The QtGui module and the QtCore module, which provides the non-GUI features required
    by QtGui, depend on the libraries described in the following table. To build
    Qt from its source code, you will also need to install the development
    packages for these libraries for your system.

    \table 100%
    \header
    \o Name
    \o Library
    \o Notes
    \o Configuration options
    \o Minimum working version
    \row {id="OptionalColor"}
    \o XRender
    \o libXrender
    \o X Rendering Extension; used for anti-aliasing
    \o \tt{-xrender} or auto-detected
    \o 0.9.0
    \row {id="OptionalColor"}
    \o Xrandr
    \o libXrandr
    \o X Resize and Rotate Extension
    \o \tt{-xrandr} or auto-detected
    \o 1.0.2
    \row {id="OptionalColor"}
    \o Xcursor
    \o libXcursor
    \o X Cursor Extension
    \o \tt{-xcursor} or auto-detected
    \o 1.1.4
    \row {id="OptionalColor"}
    \o Xfixes
    \o libXfixes
    \o X Fixes Extension
    \o \tt{-xfixes} or auto-detected
    \o 3.0.0
    \row {id="OptionalColor"}
    \o Xinerama
    \o libXinerama
    \o Multi-head support
    \o \tt{-xinerama} or auto-detected
    \o 1.1.0

    \row {id="OptionalColor"}
    \o Fontconfig
    \o libfontconfig
    \o Font customization and configuration
    \o \tt{-fontconfig} or auto-detected
    \o 2.1
    \row {id="OptionalColor"}
    \o FreeType
    \o libfreetype
    \o Font engine
    \o
    \o 2.1.3

    \row {id="DefaultColor"}
    \o Xi
    \o libXi
    \o X11 Input Extensions
    \o \tt{-xinput} or auto-detected
    \o 1.3.0
    \row {id="DefaultColor"}
    \o Xt
    \o libXt
    \o Xt Intrinsics
    \o
    \o 0.99
    \row {id="DefaultColor"}
    \o Xext
    \o libXext
    \o X Extensions
    \o
    \o 6.4.3
    \row {id="DefaultColor"}
    \o X11
    \o libX11
    \o X11 Client-Side Library
    \o
    \o 6.2.1

    \row {id="SMColor"}
    \o SM
    \o libSM
    \o X Session Management
    \o \tt{-sm} or auto-detected
    \o 6.0.4
    \row {id="SMColor"}
    \o ICE
    \o libICE
    \o Inter-Client Exchange
    \o \tt{-sm} or auto-detected
    \o 6.3.5

    \row {id="GlibColor"}
    \o glib
    \o libglib-2.0
    \o Common event loop handling
    \o \tt{-glib} or auto-detected
    \o 2.8.3
    \row {id="PthreadColor"}
    \o pthread
    \o libpthread
    \o Multithreading
    \o
    \o 2.3.5
    \endtable

    \note You must compile with XRender support to get alpha transparency
    support for pixmaps and images.

    Development packages for these libraries contain header files that are used
    when building Qt from its source code. On Debian-based GNU/Linux systems,
    for example, we recommend that you install the following development
    packages:

    \list
    \o libfontconfig1-dev
    \o libfreetype6-dev
    \o libx11-dev
    \o libxcursor-dev
    \o libxext-dev
    \o libxfixes-dev
    \o libxft-dev
    \o libxi-dev
    \o libxrandr-dev
    \o libxrender-dev
    \endlist

    Some of these packages depend on others in this list, so installing one
    may cause others to be automatically installed. Other distributions may
    provide system packages with similar names.

    \section1 OpenGL Dependencies

    The configure script will autodetect if OpenGL headers and libraries are
    installed on your system, and if so, it will include the QtOpenGL module
    in the Qt library.

    If your OpenGL headers or libraries are placed in a non-standard directory,
    you may need to change the \c QMAKE_INCDIR_OPENGL and/or
    \c QMAKE_LIBDIR_OPENGL in the config file for your system.

    The QGL documentation assumes that you are familiar with OpenGL
    programming. If you're new to the subject a good starting point is
    \l{http://www.opengl.org/}.

    \section1 Phonon Dependencies

    As described in the \l{Phonon Overview}, Phonon uses the GStreamer multimedia
    framework as the backend for audio and video playback on X11. The minimum required
    version of GStreamer is 0.10.

    To build Phonon, you need the GStreamer library, base plugins, and development
    files for your system. The package names for GStreamer vary between Linux
    distributions; try searching for \c gstreamer or \c libgstreamer in your
    distribution's package repository to find suitable packages.

    \sa {Known Issues}
*/

/*!
    \page requirements-wince.html
    \title Qt for Windows CE Requirements
    \ingroup installation
    \brief Setting up the Windows CE environment for Qt.
    \previouspage General Qt Requirements

    Qt is known to work with Visual Studio 2005/2008/2010 and the following SDKs for
    Windows CE development on Windows XP and Windows Vista:

    \list
        \o  Windows CE 5.0 Standard SDK for ARM, X86, and MIPS
        \o  Windows CE 6.0 SDKs for ARM generated using the defaults found in
            Platform Builder
        \o  Windows Mobile 5.0 (\e{Pocket PC}, \e{Smartphone} and
            \e{Pocket PC with Phone} editions)
        \o  Windows Mobile 6.0 (\e{Standard}, \e{Classic} and
            \e{Professional} editions)
    \endlist

    Below is a list of links to download the SDKs:

    \list
        \o \l{http://www.microsoft.com/downloads/details.aspx?familyid=fa1a3d66-3f61-4ddc-9510-ae450e2318c3&amp;displaylang=en}
            {Windows CE 5 Standard SDK}
        \o  \l{http://www.microsoft.com/downloads/details.aspx?familyid=83A52AF2-F524-4EC5-9155-717CBE5D25ED&amp;displaylang=en}
            {Windows Mobile 5 Pocket PC}
        \o  \l{http://www.microsoft.com/downloads/details.aspx?familyid=DC6C00CB-738A-4B97-8910-5CD29AB5F8D9&amp;displaylang=en}
            {Windows Mobile 5 Smartphone}
        \o  \l{http://www.microsoft.com/downloads/details.aspx?familyid=06111A3A-A651-4745-88EF-3D48091A390B&amp;displaylang=en}
            {Windows Mobile 6 Professional/Standard}
    \endlist

    \bold{Note:}
    \table
        \row
            \o
            \list 1
                \o Currently, there is only compile support for Windows CE 5.0
                   Standard SDK for SH-4.
                \o There is currently no "out of the box" support for the
                   Windows CE Automotive or Portable Media SDKs from Microsoft.
            \endlist
    \endtable

    Device manufacturers may prefer to make their own customized version of
    Windows CE using Platform Builder. In order for Qt for Windows CE to
    support a custom SDK, a build specification needs to be created. More
    information on Windows CE Customization can be found
    \l{Windows CE - Working with Custom SDKs}{here}.

	\section3 Requirements
	\list
		\o Development environment:
		\list
			\o Microsoft Visual Studio 2005 (Standard Edition) or higher
			\o ActivePerl
		\endlist
		\o Footprint
		\list
			\o Lean configuration - 4.8 MB
			\o Full configuration - 8.4 MB
		\endlist
		\o Operating Systems
		\list
			\o Windows CE 5 or higher
			\o Windows Mobile 5 or higher
		\endlist
		\o Hardware Platform
		\list
			\o Supported on ARM, x86
			\o (Compiles on SH4 and MIPS)
		\endlist
	\endlist

		\sa {Known Issues}
*/

/*!
    \page requirements-embedded-linux.html
    \title Qt for Embedded Linux Requirements
    \ingroup installation
    \brief Setting up the Embedded Linux environment for Qt.
    \previouspage General Qt Requirements

    \sa {Known Issues}

    \section1 Building Qt for Embedded Linux with uclibc

    If you intend to include the QtWebKit module in your Qt build then you should
    use version \bold{uClibc 0.9.29 or greater} as that is the earliest version
    with sufficient pthread support.

    \section1 Memory Requirements

    The memory and storage requirements for Qt for Embedded Linux depend on a
    an variety of different factors, including the target architecture and the
    features enabled in the Qt build.

    The following table shows typical library sizes for the most common Qt
    libraries on different architectures, built in release mode with different
    feature profiles.

    \table
    \header \o{1,2} Architecture \o{1,2} Compiler  \o{2,1} QtCore       \o{2,1} QtGui        \o{2,1} QtNetwork    \o{2,1} QtWebKit
    \header                                        \o Minimal \o Normal \o Minimal \o Normal \o Minimal \o Normal \o Minimal \o Normal
    \row    \o linux-x86-g++ \o GCC 4.2.4          \o 1.7M    \o 2.7M   \o 3.3M    \o 9.9M   \o 653K    \o 1.1M   \o N/A     \o 17M
    \row    \o linux-arm-g++ \o GCC 4.1.1          \o 1.9M    \o 3.2M   \o 4.1M    \o 11M    \o 507K    \o 1.0M   \o N/A     \o 17M
    \row    \o linux-mips-g++ (MIPS32)
                             \o GCC 4.2.4          \o 2.0M    \o 3.2M   \o 4.5M    \o 12M    \o 505K    \o 1003K  \o N/A     \o 21M
    \endtable

    Library sizes are given in the following units: K = 1024 bytes; M = 1024K.
    QtWebKit is excluded from the minimal configuration.

    The \l{Fine-Tuning Features in Qt} document covers the process of configuring
    Qt builds to avoid the inclusion of unnecessary features.

    \section1 Additional X11 Libraries for QVFb

    The Virtual Framebuffer (QVFb) application requires the \c libxtst library
    in addition to the libraries used to build Qt for X11. This library
    enables the use of the Record extension to the X protocol to be used in
    applications.
*/

/*!
    \page requirements-symbian.html
    \title Qt for the Symbian platform Requirements
    \ingroup installation
    \brief Setting up the Symbian platform environment for Qt.
    \previouspage General Qt Requirements

    \l {http://qt.nokia.com/downloads}{Qt SDK} provides all the necessary tools
    and libraries for developing Qt applications. However, if you want to build
    Qt itself for Symbian, follow the instructions below.

    Qt for the Symbian platform requires the following software installed on
    your development PC:
    \list
        \o \l{http://www.forum.nokia.com/Library/Tools_and_downloads/Other/Carbide.c++/}{Carbide.c++ v2.3.0 or higher recommended}.
           \list
           \o \bold{Note:} It may be necessary to update the Carbide compiler depending on Carbide version.
              See \l{http://pepper.troll.no/s60prereleases/patches/}{here} for instructions how to check your
              compiler version and how to patch it, if needed.
           \endlist
        \o \l{http://downloads.activestate.com/ActivePerl/releases}{ActivePerl 5.6.1 build 638 or higher}
           \list
           \o \bold{Note:} According to Symbian, version 5.6.1 build 638 is mandatory for building Symbian applications,
              but that version is no longer available from ActiveState. However, Qt for Symbian has been successfully
              compiled using both 5.8.x and 5.10.x versions.
           \endlist
        \o \l{http://www.forum.nokia.com/info/sw.nokia.com/id/ec866fab-4b76-49f6-b5a5-af0631419e9c/S60_All_in_One_SDKs.html}{S60 Platform SDK 3rd Edition FP1 or higher}
           \list
           \o \bold{Note:} Users of \bold{S60 Platform SDK 3rd Edition FP1} also need special update. The update can be found
           \l{http://pepper.troll.no/s60prereleases/patches/}{here}.
           \endlist
        \o \l{http://www.forum.nokia.com/info/sw.nokia.com/id/91d89929-fb8c-4d66-bea0-227e42df9053/Open_C_SDK_Plug-In.html}{Open C/C++ v1.7.5 or higher}.
           Install this to all Symbian SDKs you plan to use Qt with.
        \o Building Qt tools from scratch requires \l{http://www.mingw.org/}{MinGW 3.4.5 or higher}, or another windows compiler.
           \list
           \o \bold{Note:} This is not required if you are using pre-built binary package.
           \endlist
        \o Building Qt libraries requires \l{http://www.arm.com/products/tools/software-development-tools.php}{RVCT} version 2.2 (build 686 or later),
           which is not available free of charge.  Usage of later versions of RVCT, including the 3.x and 4.x series, is not supported
           in this release.
    \endlist

    Running Qt on real device requires the Open C and sqlite3 to be installed on the device.
    These installation packages are embedded into \c{qt_installer.sis}, which is included in
    Qt for Symbian binary package.

    If you are building Qt from scratch, you can find the sqlite3 package from
    under your Qt installation:

    \list
        \o \c{src\s60installs\sqlite3.sis}
    \endlist

    The Open C packages you can find in the Symbian SDK where you installed Open C/C++:
    \list
        \o \c{nokia_plugin\openc\s60opencsis\pips_s60_<version>.sis}
        \o \c{nokia_plugin\openc\s60opencsis\openc_ssl_s60_<version>.sis}
        \o \c{nokia_plugin\opencpp\s60opencppsis\stdcpp_s60_<version>.sis}
    \endlist

    If you wish to do hardware debugging with Carbide or run applications in real devices using "make run" command,
    TRK must be installed to the device. \bold{Note:} TRK is not required if you just want to install and run
    applications manually on the device.
    \list
        \o \l{http://tools.ext.nokia.com/trk/}{Application TRK}. Choose the correct
           installation package based on the S60 version of your device (S60_<S60-version>_app_trk_<TRK-version>.sisx).
    \endlist


    We recommend you to take a look at \l{http://doc.qt.digia.com/latest/install-symbian.html}{Installing Qt for the Symbian platform}
    to get more information about how to setup the development environment.

    \sa {Known Issues}
*/

/*!
    \page configure-options.html
    \title Configuration Options for Qt
    \ingroup installation
    \brief Brief description of available options for building Qt.

    This page gives a brief description of the different options available when
    building Qt using the \c configure script or \c configure.exe binary.
    To build Qt using the default options, just call configure from the command
    line as shown below.

    When building on Linux, Mac OS X and Unix platforms:

    \c{./configure}

    On Windows, run the corresponding executable:

    \c{.\configure.exe}

    If you would like to customize your build, please use the options listed in
    the following tables. To see the full list of options, invoke the configure
    tool with the \c -help command line option.

    \section2 Cross platform options:

    \table
    \header \o Option  \o Description \o Note
    \row   \o \c {-buildkey} <key> \o Build the Qt library and plugins
    using the specified \o
    \row   \o \c {<key>} \o When the library loads plugins, it will only
    load those that have a matching <key>. \o
    \row   \o \c {-release} \o Compile and link Qt with debugging turned off. \o
    \row   \o \c {-debug} \o Compile and link Qt with debugging turned on.
    \o Default value.
    \row   \o \c {-debug-and-release} \o Compile and link two Qt libraries,
    with and without debugging turned on. \o This option denotes a default
    value and needs to be evaluated. If the evaluation succeeds, the
    feature is included.
    \row   \o \c {-opensource} \o Compile and link the Open-Source Edition
    of Qt. \o
    \row   \o \c {-commercial} \o Compile and link the Commercial Edition
    of Qt. \o
    \row   \o \c {-developer-build} \o Compile and link Qt with Qt developer
    options including auto-tests exporting) \o
    \row   \o \c {-shared} \o Create and use shared Qt libraries. \o Default
    value.
    \row   \o \c {-static} \o Create and use static Qt libraries. \o
    \row   \o \c {-ltcg} \o Use Link Time Code Generation. \o Apply to release
    builds only.
    \row   \o \c {-no-ltcg} \o Do not use Link Time Code Generation. \o Default
    value.
    \row   \o \c {-no-fast} \o Configure Qt normally by generating Makefiles for
    all project files. \o Default value.
    \row   \o \c {-fast} \o Configure Qt quickly by generating Makefiles only for
    library and subdirectory targets. \o All other Makefiles are created as
    wrappers which will in turn run qmake.
    \row   \o \c {-no-exceptions} \o Disable exceptions on platforms that support
    it. \o
    \row   \o \c {-exceptions} \o Enable exceptions on platforms that support it.
    \o Default value.
    \row   \o \c {-no-accessibility} \o Do not compile Windows Active
    Accessibility support. \o
    \row   \o \c {-accessibility} \o Compile Windows Active Accessibility
    support. \o Default value.
    \row   \o \c {-no-stl} \o Do not compile STL support. \o
    \row   \o \c {-stl} \o Compile STL support. \o Default value.
    \row   \o \c {-no-sql-<driver>} \o Disable SQL <driver> entirely, by default
    none are turned on. \o
    \row   \o \c {-qt-sql-<driver>} \o Enable a SQL <driver> in the Qt Library.
    \o
    \row   \o \c {-plugin-sql-<driver>} \o Enable SQL <driver> as a plugin to be
    linked to at run time. \o Available values for <driver>: mysql, psql,
    oci, odbc, tds, db2, sqlite, sqlite2, ibase. Drivers marked with a
    '+' during configure have been detected as available on this system.
    \row   \o \c {-system-sqlite} \o Use sqlite from the operating system. \o
    \row   \o \c {-no-qt3support} \o Disables the Qt 3 support functionality. \o
    \row   \o \c {-no-opengl} \o Disables OpenGL functionality \o
    \row   \o \c {-opengl <api>} \o Enable OpenGL support with specified API
    version. \o Available values for <api>: desktop - Enable support for
    Desktop OpenGL (Default), es1 - Enable support for OpenGL ES Common
    Profile, es2 - Enable support for OpenGL ES 2.0.
    \row   \o \c {-no-openvg} \o Disables OpenVG functionality \o Default value.
    \row   \o \c {-openvg} \o Enables OpenVG functionality \o Requires EGL
    support, typically supplied by an OpenGL or other graphics
    implementation.
    \row   \o \c {-platform <spec>} \o The operating system and compiler you
    are building on. \o The default value is %QMAKESPEC%.
    \row   \o \c {-xplatform <spec>} \o The operating system and compiler you
    are cross compiling for. \o See the README file for a list of supported
    operating systems and compilers.
    \row   \o \c {-system-proxies} \o Use system network proxies by default. \o
    \row   \o \c {-no-system-proxies} \o Do not use system network proxies
    by default. \o
    \row   \o \c {-qtnamespace <namespace>} \o Wraps all Qt library code in
    'namespace name {..} \o
    \row   \o \c {-qtlibinfix <infix>} \o Renames all Qt* libs to Qt*<infix>
    \o
    \row   \o \c {-D <define>} \o Add an explicit define to the preprocessor.
    \o
    \row   \o \c {-I <includepath>} \o Add an explicit include path. \o
    \row   \o \c {-L <librarypath>} \o Add an explicit library path. \o
    \row   \o \c {-l <libraryname>} \o Add an explicit library name, residing
    in a librarypath. \o
    \row   \o \c {-graphicssystem <sys>} \o Specify which graphics system should
    be used. \o Available values for <sys>: * raster - Software rasterizer,
    opengl - Using OpenGL acceleration, experimental!, openvg - Using
    OpenVG acceleration, experimental!
    \row   \o \c {-help, -h, -?} \o Display this information. \o
    \endtable

    \section2 Third Party Libraries

    \table
    \header \o Option  \o Description \o Note
    \row   \o \c {-qt-zlib} \o Use the zlib bundled with Qt. \o
    \row   \o \c {-system-zlib} \o Use zlib from the operating system.
    \o See http://www.gzip.org/zlib
    \row   \o \c {-no-gif} \o Do not compile GIF reading support.
    \o This option denotes a default value and needs to be evaluated.
    If the evaluation succeeds, the feature is included.
    \row   \o \c {-no-libpng} \o Do not compile PNG support. \o
    \row   \o \c {-qt-libpng} \o Use the libpng bundled with Qt.
    \o This option denotes a default value and needs to be evaluated.
    If the evaluation succeeds, the feature is included.
    \row   \o \c {-system-libpng} \o Use libpng from the operating system.
    \o See http://www.libpng.org/pub/png
    \row   \o \c {-no-libmng} \o Do not compile MNG support. \o This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-qt-libmng} \o Use the libmng bundled with Qt. \o
    \row   \o \c {-system-libmng} \o Use libmng from the operating system.
    \o See http://www.libmng.com
    \row   \o \c {-no-libtiff} \o Do not compile TIFF support. \o This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-qt-libtiff} \o Use the libtiff bundled with Qt. \o
    \row   \o \c {-system-libtiff} \o Use libtiff from the operating system.
    \o See http://www.libtiff.org
    \row   \o \c {-no-libjpeg} \o Do not compile JPEG support. \o This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-qt-libjpeg} \o Use the libjpeg bundled with Qt. \o
    \row   \o \c {-system-libjpeg} \o Use libjpeg from the operating system.
    \o See http://www.ijg.org. This option denotes a default value and
    needs to be evaluated. If the evaluation succeeds, the feature is
    included.
    \endtable

    \section2 Qt for Windows only:
    \table
    \header \o Option  \o Description \o Note
    \row   \o \c {-no-dsp} \o Do not generate VC++ .dsp files. \o
    \row   \o \c {-dsp} \o Generate VC++ .dsp files, only if spec "win32-msvc".
    \o Default value.
    \row   \o \c {-no-vcproj} \o Do not generate VC++ .vcproj files. \o
    \row   \o \c {-vcproj} \o Generate VC++ .vcproj files, only if platform
    "win32-msvc.net". \o Default value.
    \row   \o \c {-no-incredibuild-xge} \o Do not add IncrediBuild XGE distribution
    commands to custom build steps. \o
    \row   \o \c {-incredibuild-xge} \o Add IncrediBuild XGE distribution commands
    to custom build steps. This will distribute MOC and UIC steps, and other
    custom buildsteps which are added to the INCREDIBUILD_XGE variable.
    \o The IncrediBuild distribution commands are only added to Visual Studio
    projects. This option denotes a default value and needs to be evaluated.
    If the evaluation succeeds, the feature is included.
    \row   \o \c {-no-plugin-manifests} \o Do not embed manifests in plugins. \o
    \row   \o \c {-plugin-manifests} \o Embed manifests in plugins.
    \o Default value.
    \row   \o \c {-no-qmake} \o Do not compile qmake. \o
    \row   \o \c {-qmake} \o Compile qmake. \o Default value
    \row   \o \c {-dont-process} \o Do not generate Makefiles/Project files. This
    will override -no-fast if specified. \o
    \row   \o \c {-process} \o Generate Makefiles/Project files. \o Default value.
    \row   \o \c {-no-rtti} \o Do not compile runtime type information. \o
    \row   \o \c {-rtti} \o Compile runtime type information. \o Default value.
    \row   \o \c {-no-mmx} \o Do not compile with use of MMX instructions \o
    \row   \o \c {-mmx} \o Compile with use of MMX instructions \o This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-no-3dnow} \o Do not compile with use of 3DNOW instructions \o
    \row   \o \c {-3dnow} \o Compile with use of 3DNOW instructions \o This
    option denotes a default value and needs to be evaluated. If the
    evaluation succeeds, the feature is included.
    \row   \o \c {-no-sse} \o Do not compile with use of SSE instructions \o
    \row   \o \c {-sse} \o Compile with use of SSE instructions \o This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-no-sse2} \o Do not compile with use of SSE2 instructions \o
    \row   \o \c {-sse2} \o Compile with use of SSE2 instructions \o This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-no-openssl} \o Do not compile in OpenSSL support \o
    \row   \o \c {-openssl} \o Compile in run-time OpenSSL support \o This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-openssl-linked} \o Compile in linked OpenSSL support \o
    \row   \o \c {-no-dbus} \o Do not compile in D-Bus support \o
    \row   \o \c {-dbus} \o Compile in D-Bus support and load libdbus-1 dynamically.
    \o This option denotes a default value and needs to be evaluated.
    If the evaluation succeeds, the feature is included.
    \row   \o \c {-dbus-linked} \o Compile in D-Bus support and link to
    libdbus-1 \o
    \row   \o \c {-no-phonon} \o Do not compile in the Phonon module \o
    \row   \o \c {-phonon} \o Compile the Phonon module. \o Phonon is built if a
    decent C++ compiler is used. This option denotes a default value and needs
    to be evaluated. If the evaluation succeeds, the feature is included.
    \row   \o \c {-no-phonon-backend} \o Do not compile the platform-specific
    Phonon backend-plugin \o
    \row   \o \c {-phonon-backend} \o Compile in the platform-specific Phonon
    backend-plugin \o Default value.
    \row   \o \c {-no-multimedia} \o Do not compile the multimedia module \o
    \row   \o \c {-multimedia} \o Compile in multimedia module \o Default value.
    \row   \o \c {-no-audio-backend} \o Do not compile in the platform audio
    backend into QtMultimedia \o
    \row   \o \c {-audio-backend} \o Compile in the platform audio backend into
    QtMultimedia \o This option denotes a default value and needs to be
    evaluated. If the evaluation succeeds, the feature is included.
    \row   \o \c {-no-webkit} \o Do not compile in the WebKit module \o
    \row   \o \c {-webkit} \o Compile in the WebKit module \o WebKit is built
    if a decent C++ compiler is used. This option denotes a default value
    and needs to be evaluated. If the evaluation succeeds, the feature is
    included.
    \row   \o \c {-webkit-debug} \o Compile in the WebKit module with debug
    symbols. \o
    \row   \o \c {-no-script} \o Do not build the QtScript module. \o
    \row   \o \c {-script} \o Build the QtScript module. \o This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-no-scripttools} \o Do not build the QtScriptTools module. \o
    \row   \o \c {-scripttools} \o Build the QtScriptTools module. \o This
    option denotes a default value and needs to be evaluated. If the
    evaluation succeeds, the feature is included.
    \row   \o \c {-no-declarative} \o Do not build the declarative module \o
    \row   \o \c {-declarative} \o Build the declarative module \o This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-no-declarative-debug} \o Do not build the declarative debugging
    support \o
    \row   \o \c {-declarative-debug} \o Build the declarative debugging support
    \o Default value.
    \row   \o \c {-arch <arch>} \o Specify an architecture. \o Available values for
    <arch>:  * windows, windowsce, symbian, boundschecker, generic.
    \row   \o \c {-no-style-<style>} \o Disable <style> entirely. \o
    \row   \o \c {-qt-style-<style>} \o Enable <style> in the Qt Library.
    \o Available styles: * windows, + windowsxp, + windowsvista,
    * plastique, * cleanlooks, * motif, * cde, windowsce, windowsmobile,
    s60
    \row   \o \c {-no-native-gestures} \o Do not use native gestures on Windows 7.
    \o
    \row   \o \c {-native-gestures} \o Use native gestures on Windows 7.
    \o Default value.
    \row   \o \c {-no-mp} \o Do not use multiple processors for compiling with MSVC
    \o Default value.
    \row   \o \c {-mp} \o Use multiple processors for compiling with MSVC (-MP) \o
    \row   \o \c {-loadconfig <config>} \o Run configure with the parameters from file
    configure_<config>.cache. \o
    \row   \o \c {-saveconfig <config>} \o Run configure and save the parameters in
    file configure_<config>.cache. \o
    \row   \o \c {-redo} \o Run configure with the same parameters as last time. \o
    \endtable

    \section2 Qt for Windows CE only:
    \table
    \header \o Option  \o Description \o Note
    \row   \o \c {-no-iwmmxt} \o Do not compile with use of IWMMXT instructions \o
    \row   \o \c {-iwmmxt} \o Do compile with use of IWMMXT instructions. \o This is
    for Qt for Windows CE on Arm only. This option denotes a default value and
    needs to be evaluated. If the evaluation succeeds, the feature is included.
    \row   \o \c {-no-crt} \o Do not add the C runtime to default deployment rules.
    \o Default value.
    \row   \o \c {-qt-crt} \o Qt identifies C runtime during project generation \o
    \row   \o \c {-crt <path>} \o Specify path to C runtime used for project
    generation. \o
    \row   \o \c {-no-cetest} \o Do not compile Windows CE remote test application \o
    \row   \o \c {-cetest} \o Compile Windows CE remote test application \o This
    option denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \o \c {-signature <file>} \o Use file for signing the target project \o
    \row   \o \c {-phonon-wince-ds9} \o Enable Phonon Direct Show 9 backend for
    Windows CE \o Default value
    \endtable

    \section2 Qt for Symbian OS only:
    \table
    \header \o Option  \o Description \o Note
    \row   \o \c {-no-freetype} \o Do not compile in Freetype2 support.
    \o Default value.
    \row   \o \c {-qt-freetype} \o Use the libfreetype bundled with Qt. \o
    \row   \o \c {-fpu <flags>} \o VFP type on ARM, supported options:
    softvfp(default) |vfpv2 | softvfp+vfpv2 \o
    \row   \o \c {-no-s60} \o Do not compile in S60 support. \o
    \row   \o \c {-s60} \o Compile with support for the S60 UI Framework
    \o Default value.
    \row   \o \c {-no-usedeffiles} \o Disable the usage of DEF files. \o
    \row   \o \c {-usedeffiles} \o Enable the usage of DEF files. \o
    \endtable
*/
