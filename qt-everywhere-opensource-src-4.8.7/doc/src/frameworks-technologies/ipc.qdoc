/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page ipc.html
    \title Inter-Process Communication in Qt
    \brief Inter-Process communication in Qt applications.

    \ingroup technology-apis
    \ingroup qt-basic-concepts
    \ingroup qt-network

    Qt provides several ways to implement Inter-Process Communication
    (IPC) in Qt applications.

    \section1 TCP/IP

    The cross-platform \l{QtNetwork} module provides classes that make
    network programming portable and easy. It offers high-level
    classes (e.g., QNetworkAccessManager, QFtp) that communicate using
    specific application-level protocols, and lower-level classes
    (e.g., QTcpSocket, QTcpServer, QSslSocket) for implementing
    protocols.

    \section1 Shared Memory

    The cross-platform shared memory class, QSharedMemory, provides
    access to the operating system's shared memory implementation.
    It allows safe access to shared memory segments by multiple threads
    and processes. Additionally, QSystemSemaphore can be used to control
    access to resources shared by the system, as well as to communicate
    between processes.

    \section1 D-Bus

    The \l{QtDBus} module is a Unix-only library you can use to
    implement IPC using the D-Bus protocol. It extends Qt's
    \l{signalsandslots.html} {Signals and Slots} mechanism to the IPC
    level, allowing a signal emitted by one process to be connected to
    a slot in another process. This \l {D-Bus} page has detailed
    information on how to use the \l{QtDBus} module.

    \section1 Qt COmmunications Protocol (QCOP)

    The QCopChannel class implements a protocol for transferring messages
    between client processes across named channels. QCopChannel is
    only available in \l{Qt for Embedded Linux}. Like the \l{QtDBus}
    module, QCOP extends Qt's \l{Signals and Slots} mechanism to the
    IPC level, allowing a signal emitted by one process to be
    connected to a slot in another process, but unlike QtDBus, QCOP
    does not depend on a third party library.
*/
