/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qml-coding-conventions.html
\title QML Coding Conventions

This document contains the QML coding conventions that we follow in our documentation and examples and recommend that others follow.

This page assumes that you are already familiar with the QML language.
If you need an introduction to the language, please read \l {Introduction to the QML language}{the QML introduction} first.


\section1 QML Objects

Through our documentation and examples, QML objects are always structured in the following order:

\list
\o id
\o property declarations
\o signal declarations
\o JavaScript functions
\o object properties
\o child objects
\o states
\o transitions
\endlist

For better readability, we separate these different parts with an empty line.


For example, a hypothetical \e photo QML object would look like this:

\snippet doc/src/snippets/declarative/codingconventions/photo.qml 0


\section1 Grouped Properties

If using multiple properties from a group of properties,
we use the \e {group notation} rather than the \e {dot notation} to improve readability.

For example, this:

\snippet doc/src/snippets/declarative/codingconventions/dotproperties.qml 0

can be written like this:

\snippet doc/src/snippets/declarative/codingconventions/dotproperties.qml 1


\section1 Private Properties

QML and JavaScript do not enforce private properties like C++. There is a need
to hide these private properties, for example, when the properties are part of
the implementation. To effectively gain private properties in a QML Item, the
convention is to add a QtObject{} child to contain the properties. This shields them from being accessed outside the file in QML and JavaScript. As it involves the creation of another object, it is more expensive than just creating a property. To minimize the performance cost, try to group all private properties in one file into the same QtObject.

\snippet doc/src/snippets/declarative/codingconventions/private.qml 0


\section1 Lists

If a list contains only one element, we generally omit the square brackets.

For example, it is very common for a component to only have one state.

In this case, instead of:

\snippet doc/src/snippets/declarative/codingconventions/lists.qml 0

we will write this:

\snippet doc/src/snippets/declarative/codingconventions/lists.qml 1


\section1 JavaScript Code

If the script is a single expression, we recommend writing it inline:

\snippet doc/src/snippets/declarative/codingconventions/javascript.qml 0

If the script is only a couple of lines long, we generally use a block:

\snippet doc/src/snippets/declarative/codingconventions/javascript.qml 1

If the script is more than a couple of lines long or can be used by different objects, we recommend creating a function and calling it like this:

\snippet doc/src/snippets/declarative/codingconventions/javascript.qml 2

For long scripts, we will put the functions in their own JavaScript file and import it like this:

\snippet doc/src/snippets/declarative/codingconventions/javascript-imports.qml 0

*/









