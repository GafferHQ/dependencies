/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSVoidCallback.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "VoidCallback.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSVoidCallback);

/* Hash table for prototype */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSVoidCallbackPrototypeTableValues[2] =
{
    { "handleEvent", DontDelete | Function, (intptr_t)static_cast<NativeFunction>(jsVoidCallbackPrototypeFunctionHandleEvent), (intptr_t)0 THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSVoidCallbackPrototypeTable = { 2, 1, JSVoidCallbackPrototypeTableValues, 0 };
const ClassInfo JSVoidCallbackPrototype::s_info = { "VoidCallbackPrototype", &JSC::JSObjectWithGlobalObject::s_info, &JSVoidCallbackPrototypeTable, 0 };

JSObject* JSVoidCallbackPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSVoidCallback>(exec, globalObject);
}

bool JSVoidCallbackPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSVoidCallbackPrototypeTable, this, propertyName, slot);
}

bool JSVoidCallbackPrototype::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticFunctionDescriptor<JSObject>(exec, &JSVoidCallbackPrototypeTable, this, propertyName, descriptor);
}

const ClassInfo JSVoidCallback::s_info = { "VoidCallback", &JSDOMWrapper::s_info, 0, 0 };

JSVoidCallback::JSVoidCallback(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<VoidCallback> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl)
{
    ASSERT(inherits(&s_info));
}

JSObject* JSVoidCallback::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSVoidCallbackPrototype(exec->globalData(), globalObject, JSVoidCallbackPrototype::createStructure(globalObject->globalData(), globalObject->objectPrototype()));
}

EncodedJSValue JSC_HOST_CALL jsVoidCallbackPrototypeFunctionHandleEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSVoidCallback::s_info))
        return throwVMTypeError(exec);
    JSVoidCallback* castedThis = static_cast<JSVoidCallback*>(asObject(thisValue));
    VoidCallback* imp = static_cast<VoidCallback*>(castedThis->impl());

    imp->handleEvent();
    return JSValue::encode(jsUndefined());
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, VoidCallback* impl)
{
    return wrap<JSVoidCallback>(exec, globalObject, impl);
}


}
