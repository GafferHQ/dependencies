/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUDIO)

#include "JSAudioGain.h"

#include "AudioGain.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSAudioGain);

/* Hash table */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSAudioGainTableValues[2] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioGainConstructor), (intptr_t)0 THUNK_GENERATOR(0) },
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSAudioGainTable = { 2, 1, JSAudioGainTableValues, 0 };
/* Hash table for constructor */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSAudioGainConstructorTableValues[1] =
{
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSAudioGainConstructorTable = { 1, 0, JSAudioGainConstructorTableValues, 0 };
class JSAudioGainConstructor : public DOMConstructorObject {
public:
    JSAudioGainConstructor(JSC::ExecState*, JSC::Structure*, JSDOMGlobalObject*);

    virtual bool getOwnPropertySlot(JSC::ExecState*, const JSC::Identifier&, JSC::PropertySlot&);
    virtual bool getOwnPropertyDescriptor(JSC::ExecState*, const JSC::Identifier&, JSC::PropertyDescriptor&);
    static const JSC::ClassInfo s_info;
    static JSC::Structure* createStructure(JSC::JSGlobalData& globalData, JSC::JSValue prototype)
    {
        return JSC::Structure::create(globalData, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), AnonymousSlotCount, &s_info);
    }
protected:
    static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | JSC::ImplementsHasInstance | DOMConstructorObject::StructureFlags;
};

const ClassInfo JSAudioGainConstructor::s_info = { "AudioGainConstructor", &DOMConstructorObject::s_info, &JSAudioGainConstructorTable, 0 };

JSAudioGainConstructor::JSAudioGainConstructor(ExecState* exec, Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSAudioGainPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSAudioGainConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSAudioGainConstructor, JSDOMWrapper>(exec, &JSAudioGainConstructorTable, this, propertyName, slot);
}

bool JSAudioGainConstructor::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSAudioGainConstructor, JSDOMWrapper>(exec, &JSAudioGainConstructorTable, this, propertyName, descriptor);
}

/* Hash table for prototype */
#if ENABLE(JIT)
#define THUNK_GENERATOR(generator) , generator
#else
#define THUNK_GENERATOR(generator)
#endif

static const HashTableValue JSAudioGainPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 THUNK_GENERATOR(0) }
};

#undef THUNK_GENERATOR
static JSC_CONST_HASHTABLE HashTable JSAudioGainPrototypeTable = { 1, 0, JSAudioGainPrototypeTableValues, 0 };
const ClassInfo JSAudioGainPrototype::s_info = { "AudioGainPrototype", &JSC::JSObjectWithGlobalObject::s_info, &JSAudioGainPrototypeTable, 0 };

JSObject* JSAudioGainPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAudioGain>(exec, globalObject);
}

const ClassInfo JSAudioGain::s_info = { "AudioGain", &JSAudioParam::s_info, &JSAudioGainTable, 0 };

JSAudioGain::JSAudioGain(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<AudioGain> impl)
    : JSAudioParam(structure, globalObject, impl)
{
    ASSERT(inherits(&s_info));
}

JSObject* JSAudioGain::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSAudioGainPrototype(exec->globalData(), globalObject, JSAudioGainPrototype::createStructure(exec->globalData(), JSAudioParamPrototype::self(exec, globalObject)));
}

bool JSAudioGain::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSAudioGain, Base>(exec, &JSAudioGainTable, this, propertyName, slot);
}

bool JSAudioGain::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSAudioGain, Base>(exec, &JSAudioGainTable, this, propertyName, descriptor);
}

JSValue jsAudioGainConstructor(ExecState* exec, JSValue slotBase, const Identifier&)
{
    JSAudioGain* domObject = static_cast<JSAudioGain*>(asObject(slotBase));
    return JSAudioGain::getConstructor(exec, domObject->globalObject());
}

JSValue JSAudioGain::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAudioGainConstructor>(exec, static_cast<JSDOMGlobalObject*>(globalObject));
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, AudioGain* impl)
{
    return wrap<JSAudioGain>(exec, globalObject, impl);
}


}

#endif // ENABLE(WEB_AUDIO)
