--- a/PySide2/global.h.in	2011-11-29 15:13:14 +0100
+++ b/PySide2/global.h.in	2015-02-27 11:59:49 +0100
@@ -35,7 +35,7 @@
 class QString;

 #ifndef Q_MOC_OUTPUT_REVISION
-#define Q_MOC_OUTPUT_REVISION 61
+#define Q_MOC_OUTPUT_REVISION 67
 #endif

 // macro for onaming members
@@ -113,6 +113,14 @@
         : QGenericArgument(aName, static_cast<const void *>(&aData))
         {}
 };
+template <class T>
+class QArgument<T &>: public QGenericArgument
+{
+public:
+    inline QArgument(const char *aName, T &aData)
+        : QGenericArgument(aName, static_cast<const void *>(&aData))
+        {}
+};


 template <typename T>
@@ -126,17 +134,15 @@

 struct Q_CORE_EXPORT QMetaObject
 {
+    class Connection;
     const char *className() const;
     const QMetaObject *superClass() const;

     QObject *cast(QObject *obj) const;
+    const QObject *cast(const QObject *obj) const;

 #ifndef QT_NO_TRANSLATION
-    // ### Qt 4: Merge overloads
-    QString tr(const char *s, const char *c) const;
-    QString trUtf8(const char *s, const char *c) const;
-    QString tr(const char *s, const char *c, int n) const;
-    QString trUtf8(const char *s, const char *c, int n) const;
+    QString tr(const char *s, const char *c, int n = -1) const;
 #endif // QT_NO_TRANSLATION

     int methodOffset() const;
@@ -166,28 +172,27 @@
     QMetaProperty userProperty() const;

     static bool checkConnectArgs(const char *signal, const char *method);
+    static bool checkConnectArgs(const QMetaMethod &signal,
+                                 const QMetaMethod &method);
     static QByteArray normalizedSignature(const char *method);
     static QByteArray normalizedType(const char *type);

     // internal index-based connect
-    static bool connect(const QObject *sender, int signal_index,
+    static Connection connect(const QObject *sender, int signal_index,
                         const QObject *receiver, int method_index,
                         int type = 0, int *types = 0);
     // internal index-based disconnect
     static bool disconnect(const QObject *sender, int signal_index,
                            const QObject *receiver, int method_index);
+    static bool disconnectOne(const QObject *sender, int signal_index,
+                              const QObject *receiver, int method_index);
     // internal slot-name based connect
     static void connectSlotsByName(QObject *o);

     // internal index-based signal activation
     static void activate(QObject *sender, int signal_index, void **argv);
-    static void activate(QObject *sender, int from_signal_index, int to_signal_index, void **argv);
     static void activate(QObject *sender, const QMetaObject *, int local_signal_index, void **argv);
-    static void activate(QObject *sender, const QMetaObject *, int from_local_signal_index, int to_local_signal_index, void **argv);
-    // internal guarded pointers
-    static void addGuard(QObject **ptr);
-    static void removeGuard(QObject **ptr);
-    static void changeGuard(QObject **ptr, QObject *o);
+    static void activate(QObject *sender, int signal_offset, int local_signal_index, void **argv);

     static bool invokeMethod(QObject *obj, const char *member,
                              Qt::ConnectionType,
@@ -274,55 +279,81 @@
         QueryPropertyStored,
         QueryPropertyEditable,
         QueryPropertyUser,
-        CreateInstance
+        CreateInstance,
+        IndexOfMethod,
+        RegisterPropertyMetaType,
+        RegisterMethodArgumentMetaType
     };

     int static_metacall(Call, int, void **) const;
-
-#ifdef QT3_SUPPORT
-    QT3_SUPPORT const char *superClassName() const;
-#endif
+    static int metacall(QObject *, Call, int, void **);

     struct { // private data
         const QMetaObject *superdata;
-        const char *stringdata;
+        const QByteArrayData *stringdata;
         const uint *data;
-        const void *extradata;
+        typedef void (*StaticMetacallFunction)(QObject *, QMetaObject::Call, int, void **);
+        StaticMetacallFunction static_metacall;
+        const QMetaObject * const *relatedMetaObjects;
+        void *extradata; //reserved for future use
     } d;
 };

-struct QMetaObjectExtraData
-{
-    const QMetaObject **objects;
-    int (*static_metacall)(QMetaObject::Call, int, void **);
-};
+class Q_CORE_EXPORT QMetaObject::Connection {
+    void *d_ptr; //QObjectPrivate::Connection*
+    explicit Connection(void *data) : d_ptr(data) {  }
+    friend class QObject;
+    friend class QObjectPrivate;
+    friend struct QMetaObject;
+public:
+    ~Connection();
+    Connection();
+    Connection(const Connection &other);
+    Connection &operator=(const Connection &other);
+#ifdef Q_QDOC
+    operator bool() const;
+#else
+    typedef void *Connection::*RestrictedBool;
+    operator RestrictedBool() const { return d_ptr ? &Connection::d_ptr : 0; }
+#endif

-inline const char *QMetaObject::className() const
-{ return d.stringdata; }
+#ifdef Q_COMPILER_RVALUE_REFS
+    inline Connection(Connection &&o) : d_ptr(o.d_ptr) { o.d_ptr = 0; }
+    inline Connection &operator=(Connection &&other)
+    { qSwap(d_ptr, other.d_ptr); return *this; }
+#endif
+};

 inline const QMetaObject *QMetaObject::superClass() const
 { return d.superdata; }

-#ifdef QT3_SUPPORT
-inline const char *QMetaObject::superClassName() const
-{ return d.superdata ? d.superdata->className() : 0; }
-#endif
+namespace QtPrivate {
+    /* Trait that tells is a the Object has a Q_OBJECT macro */
+    template <typename Object> struct HasQ_OBJECT_Macro {
+        template <typename T>
+        static char test(int (T::*)(QMetaObject::Call, int, void **));
+        static int test(int (Object::*)(QMetaObject::Call, int, void **));
+        enum { Value =  sizeof(test(&Object::qt_metacall)) == sizeof(int) };
+    };
+}

 QT_END_NAMESPACE

 QT_END_HEADER

-#define qdoc
+//Qt5 qdoc->Q_QDOC
+#define Q_QDOC

 #if @ENABLE_X11@
-  #define Q_WS_X11
+  #define Q_OS_X11
 #elif @ENABLE_MAC@
-  #define Q_WS_MAC
+  #define Q_OS_MAC
 #elif @ENABLE_WIN@
   #include "pysidewtypes.h"
-  #define Q_WS_WIN
+  #include "@QT_QTCORE_INCLUDE_DIR@/QtCore/qwineventnotifier.h"
+  #define Q_OS_WIN
 #elif @ENABLE_SIMULATOR@
-  #define Q_WS_SIMULATOR
+  #define Q_OS_SIMULATOR
 #endif

 // There are symbols in Qt that exist in Debug but
@@ -333,7 +364,7 @@
 #if @ENABLE_MAC@ || @ENABLE_WIN@
   // Workaround to parse the QApplication header
   #define Q_INTERNAL_QAPP_SRC
-  #undef qdoc
+  #undef Q_QDOC
 #endif
 #include "@QT_QTGUI_INCLUDE_DIR@/QtGui"
 #include "qpytextobject.h"  // PySide class
@@ -374,40 +405,7 @@
 #endif
 #endif

-// Phonon
-#include "phonon/pyside_phonon.h"
-#include "@QT_PHONON_INCLUDE_DIR@/abstractaudiooutput.h"
-#include "@QT_PHONON_INCLUDE_DIR@/abstractmediastream.h"
-#include "@QT_PHONON_INCLUDE_DIR@/abstractvideooutput.h"
-#include "@QT_PHONON_INCLUDE_DIR@/addoninterface.h"
-#include "@QT_PHONON_INCLUDE_DIR@/audiooutput.h"
-#include "@QT_PHONON_INCLUDE_DIR@/audiooutputinterface.h"
-#include "@QT_PHONON_INCLUDE_DIR@/backendcapabilities.h"
-#include "@QT_PHONON_INCLUDE_DIR@/backendinterface.h"
-#include "@QT_PHONON_INCLUDE_DIR@/effect.h"
-#include "@QT_PHONON_INCLUDE_DIR@/effectinterface.h"
-#include "@QT_PHONON_INCLUDE_DIR@/effectparameter.h"
-#include "@QT_PHONON_INCLUDE_DIR@/effectwidget.h"
-#include "@QT_PHONON_INCLUDE_DIR@/mediacontroller.h"
-#include "@QT_PHONON_INCLUDE_DIR@/medianode.h"
-#include "@QT_PHONON_INCLUDE_DIR@/mediaobject.h"
-#include "@QT_PHONON_INCLUDE_DIR@/mediaobjectinterface.h"
-#include "@QT_PHONON_INCLUDE_DIR@/mediasource.h"
-#include "@QT_PHONON_INCLUDE_DIR@/objectdescription.h"
-#include "@QT_PHONON_INCLUDE_DIR@/objectdescriptionmodel.h"
-#include "@QT_PHONON_INCLUDE_DIR@/path.h"
-#include "@QT_PHONON_INCLUDE_DIR@/phonon_export.h"
-#include "@QT_PHONON_INCLUDE_DIR@/phonondefs.h"
-#include "@QT_PHONON_INCLUDE_DIR@/phononnamespace.h"
-#include "@QT_PHONON_INCLUDE_DIR@/platformplugin.h"
-#include "@QT_PHONON_INCLUDE_DIR@/seekslider.h"
-#include "@QT_PHONON_INCLUDE_DIR@/streaminterface.h"
-#include "@QT_PHONON_INCLUDE_DIR@/videoplayer.h"
-#include "@QT_PHONON_INCLUDE_DIR@/videowidget.h"
-#include "@QT_PHONON_INCLUDE_DIR@/videowidgetinterface.h"
-#include "@QT_PHONON_INCLUDE_DIR@/volumefadereffect.h"
-#include "@QT_PHONON_INCLUDE_DIR@/volumefaderinterface.h"
-#include "@QT_PHONON_INCLUDE_DIR@/volumeslider.h"
+

 //QtHelp need be included after QtSql
 #include "@QT_QTHELP_INCLUDE_DIR@/QtHelp"
Only in sources_qt5/pyside-qt+1.0.9/cmake/Macros: FindQt5Extra.cmake
