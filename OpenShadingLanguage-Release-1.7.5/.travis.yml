# .travis.yml for OSL

language: cpp
sudo: false
compiler:
    - clang
    - gcc
os:
    - linux
    - osx
osx_image: xcode6.4
dist: trusty

# Do a default build (C++03, sse2), an sse4.2 build, and a C++11 build.
# Also try with both gcc 4.8 and 4.9 (on Linux; on OSX these will be
# excluded).
env:
    matrix:
      - WHICHGCC=4.8 USE_CPP11=1
      - WHICHGCC=4.9 USE_CPP11=1
      - WHICHGCC=5 USE_CPP11=1
      - WHICHGCC=6 USE_CPP11=1
      - WHICHGCC=4.8 OIIOBRANCH=RB-1.7 USE_CPP11=0
      - WHICHGCC=4.8 OIIOBRANCH=RB-1.7 USE_CPP11=1
      - WHICHGCC=4.8 DEBUG=1 USE_CPP11=1

# Add-ons: specify apt packages for Linux
addons:
  apt: 
   sources:
      - boost-latest
      - ubuntu-toolchain-r-test
   packages:
      - gcc-4.8
      - g++-4.8
      - gcc-4.9
      - g++-4.9
      - gcc-5
      - g++-5
      - gcc-6
      - g++-6
      - libboost1.55-all-dev
      - libtiff4-dev
      - llvm3.4
      - clang-3.4

cache:
    ccache: true
    apt: true
    directories:
      - $HOME/.ccache

before_install:
    - if [ $TRAVIS_OS_NAME == osx ] ; then
          export PLATFORM=macosx ;
          sysctl machdep.cpu.features ;
      elif [ $TRAVIS_OS_NAME == linux ] ; then
          export PLATFORM=linux64 ;
          cat /proc/cpuinfo ;
      fi
    - export OIIOPLATFORM=$PLATFORM
    - if [ $DEBUG == 1 ] ; then export PLATFORM=${PLATFORM}.debug ; fi
    - echo "Build platform name is $PLATFORM"

install:
    - if [ "$CXX" == "g++" ]; then export CXX="g++-${WHICHGCC}" ; fi
    - export USE_CCACHE=1
    - export CCACHE_CPP2=1
    - if [ $TRAVIS_OS_NAME == osx ] ; then
          src/build-scripts/install_homebrew_deps.bash ;
          export LLVM_DIRECTORY=/usr/local/Cellar/llvm34/3.4.2/lib/llvm-3.4 ;
      elif [ $TRAVIS_OS_NAME == linux ] ; then
          CXX="ccache $CXX" CCACHE_CPP2=1 src/build-scripts/build_openexr.bash ;
          export ILMBASE_HOME=$PWD/openexr-install ;
          export OPENEXR_HOME=$PWD/openexr-install ;
      fi
    - export OIIOMAKEFLAGS="$OIIOMAKEFLAGS -j2 DEBUG= "
    - src/build-scripts/build_openimageio.bash
    - export OPENIMAGEIOHOME=$PWD/OpenImageIO/dist/$OIIOPLATFORM
    - export DYLD_LIBRARY_PATH=$OPENIMAGEIOHOME/lib:$DYLD_LIBRARY_PATH
    - export LD_LIBRARY_PATH=$OPENIMAGEIOHOME/lib:$LD_LIBRARY_PATH
    - export PATH=$OPENIMAGEIOHOME/bin:$PATH
    - if [ $TRAVIS_OS_NAME == linux ] ; then
          export BUILD_FLAGS="$BUILD_FLAGS LLVM_STATIC=1" ;
          export TEST_FLAGS="-E broken\|render-cornell\|render-oren-nayar\|render-veachmis\|render-ward" ;
      fi
    # ^^^ Linux only, can't make these test work. Exclude for now and return later. ;

# before_script:

script:
    - make VERBOSE=1 $BUILD_FLAGS cmakesetup
    - make -j2 $BUILD_FLAGS
    - export OSLHOME=$PWD/dist/$PLATFORM
    - export DYLD_LIBRARY_PATH=$OSLHOME/lib:$DYLD_LIBRARY_PATH 
    - export LD_LIBRARY_PATH=$OSLHOME/lib:$LD_LIBRARY_PATH
    - make $BUILD_FLAGS test


# after_success:

after_failure:
# FIXME: find failed logs, stash them or send them to lg?

branches:
  only:
    - master
    - /RB-/
    - /lg-/

matrix:
    exclude:
      - os: osx
        compiler: gcc
      - os: linux
        compiler: clang
      - os: osx
        compiler: clang
        env: WHICHGCC=4.9 USE_CPP11=1
      - os: osx
        compiler: clang
        env: WHICHGCC=5 USE_CPP11=1
      - os: osx
        compiler: clang
        env: WHICHGCC=6 USE_CPP11=1

notifications:
    email:
#        recipients:
#            - 
        on_success: change
        on_failure: always
