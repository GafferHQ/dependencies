--- a/CMakeLists.txt	2022-02-03 12:20:12.360659558 +0000
+++ b/CMakeLists.txt	2022-02-03 12:20:16.823699994 +0000
@@ -100,7 +100,7 @@
 # Compiler features.
 #--------------------------------------------------------------------------------------------------

-set (CMAKE_CXX_STANDARD 11)
+set (CMAKE_CXX_STANDARD 17)

 include (WriteCompilerDetectionHeader)

--- a/src/appleseed/renderer/kernel/lighting/lighttree.cpp	2022-02-03 14:23:35.578430702 +0000
+++ b/src/appleseed/renderer/kernel/lighting/lighttree.cpp	2022-02-03 14:24:14.834798086 +0000
@@ -398,7 +398,7 @@
         ? shading_point.get_shading_normal()
         : -shading_point.get_shading_normal();

-    const float cos_omega = clamp(static_cast<float>(dot(N, outcoming_light_direction)), -1.0f, 1.0f);
+    const float cos_omega = foundation::clamp(static_cast<float>(dot(N, outcoming_light_direction)), -1.0f, 1.0f);
     const float approx_contribution = sub_hemispherical_light_source_contribution(cos_omega, cos_sigma);

     assert(approx_contribution > 0.0f);

--- a/src/appleseed/renderer/kernel/shading/closures.cpp	2022-02-03 14:23:35.588430795 +0000
+++ b/src/appleseed/renderer/kernel/shading/closures.cpp	2022-02-03 14:29:25.878728918 +0000
@@ -469,12 +469,12 @@
             values->m_metallic = saturate(p->metallic);
             values->m_specular = max(p->specular, 0.0f);
             values->m_specular_tint = saturate(p->specular_tint);
-            values->m_anisotropic = clamp(p->anisotropic, -1.0f, 1.0f);
-            values->m_roughness = clamp(p->roughness, 0.0001f, 1.0f);
+            values->m_anisotropic = foundation::clamp(p->anisotropic, -1.0f, 1.0f);
+            values->m_roughness = foundation::clamp(p->roughness, 0.0001f, 1.0f);
             values->m_sheen = saturate(p->sheen);
             values->m_sheen_tint = saturate(p->sheen_tint);
             values->m_clearcoat = max(p->clearcoat, 0.0f);
-            values->m_clearcoat_gloss = clamp(p->clearcoat_gloss, 0.0001f, 1.0f);
+            values->m_clearcoat_gloss = foundation::clamp(p->clearcoat_gloss, 0.0001f, 1.0f);
         }
     };

@@ -612,7 +612,7 @@
             values->m_reflection_tint.set(Color3f(p->reflection_tint), g_std_lighting_conditions, Spectrum::Reflectance);
             values->m_refraction_tint.set(Color3f(p->refraction_tint), g_std_lighting_conditions, Spectrum::Reflectance);
             values->m_roughness = max(p->roughness, 0.0001f);
-            values->m_anisotropy = clamp(p->anisotropy, -1.0f, 1.0f);
+            values->m_anisotropy = foundation::clamp(p->anisotropy, -1.0f, 1.0f);
             values->m_ior = max(p->ior, 0.001f);
             values->m_volume_transmittance.set(Color3f(p->volume_transmittance), g_std_lighting_conditions, Spectrum::Reflectance);
             values->m_volume_transmittance_distance = p->volume_transmittance_distance;
@@ -708,7 +708,7 @@
             values->m_reflectance.set(1.0f);
             values->m_reflectance_multiplier = 1.0f;
             values->m_roughness = roughness;
-            values->m_anisotropy = clamp(p->anisotropy, -1.0f, 1.0f);
+            values->m_anisotropy = foundation::clamp(p->anisotropy, -1.0f, 1.0f);
             values->m_ior = ior;
             values->m_fresnel_weight = fresnel_weight;
             values->m_energy_compensation = saturate(p->energy_compensation);
@@ -876,7 +876,7 @@
             values->m_edge_tint.set(Color3f(p->edge_tint), g_std_lighting_conditions, Spectrum::Reflectance);
             values->m_reflectance_multiplier = 1.0f;
             values->m_roughness = max(p->roughness, 0.0f);
-            values->m_anisotropy = clamp(p->anisotropy, -1.0f, 1.0f);
+            values->m_anisotropy = foundation::clamp(p->anisotropy, -1.0f, 1.0f);
             values->m_energy_compensation = saturate(p->energy_compensation);
         }
     };
@@ -1082,7 +1082,7 @@
             values->m_specular_reflectance.set(Color3f(p->specular_reflectance), g_std_lighting_conditions,
             Spectrum::Reflectance);
             values->m_specular_reflectance_multiplier = max(p->specular_reflectance_multiplier, 0.0f);
-            values->m_roughness = clamp(p->roughness, 0.0001f, 1.0f);
+            values->m_roughness = foundation::clamp(p->roughness, 0.0001f, 1.0f);
             values->m_ior = max(p->ior, 0.001f);
             values->m_diffuse_reflectance.set(Color3f(p->diffuse_reflectance), g_std_lighting_conditions,
             Spectrum::Reflectance);
@@ -1344,7 +1344,7 @@
                         arena);

                 copy_parameters(p, values);
-                values->m_volume_anisotropy = clamp(p->volume_anisotropy, -0.999f, 0.999f);
+                values->m_volume_anisotropy = foundation::clamp(p->volume_anisotropy, -0.999f, 0.999f);
             }
             else
             {
@@ -1447,9 +1447,9 @@
             values->m_mfp.set(Color3f(p->mean_free_path), g_std_lighting_conditions, Spectrum::Reflectance);
             values->m_mfp_multiplier = 1.0f;
             values->m_ior = p->ior;
-            values->m_surface_roughness = clamp(p->surface_roughness, 0.0001f, 1.0f);
+            values->m_surface_roughness = foundation::clamp(p->surface_roughness, 0.0001f, 1.0f);
             values->m_fresnel_weight = 1.0f;
-            values->m_volume_anisotropy = clamp(p->volume_anisotropy, -0.999f, 0.999f);
+            values->m_volume_anisotropy = foundation::clamp(p->volume_anisotropy, -0.999f, 0.999f);
         }
     };

@@ -1664,7 +1664,7 @@
             values->m_cos_crease_threshold = cos(deg_to_rad(p->creases_threshold));

             values->m_features = features;
-            values->m_quality = static_cast<size_t>(clamp(p->quality, 1, 4));
+            values->m_quality = static_cast<size_t>(foundation::clamp(p->quality, 1, 4));
         }
     };
 }

--- a/src/appleseed/renderer/modeling/bsdf/glassbsdf.cpp	2022-02-03 14:23:35.608430983 +0000
+++ b/src/appleseed/renderer/modeling/bsdf/glassbsdf.cpp	2022-02-03 14:30:56.430583225 +0000
@@ -299,7 +299,7 @@

             // Compute the Fresnel term and the sampling probabilities.
             const float rcp_eta = 1.0f / eta;
-            const float cos_wom = clamp(dot(wo, m), -1.0f, 1.0f);
+            const float cos_wom = foundation::clamp(dot(wo, m), -1.0f, 1.0f);

             float cos_theta_t;
             const float F = fresnel_reflectance(cos_wom, rcp_eta, cos_theta_t);
@@ -844,7 +844,7 @@

                 // Compute the Fresnel term.
                 const float rcp_eta = 1.0f / eta;
-                const float cos_wom = clamp(dot(wo, m), -1.0f, 1.0f);
+                const float cos_wom = foundation::clamp(dot(wo, m), -1.0f, 1.0f);

                 float cos_theta_t;
                 const float F = fresnel_reflectance(cos_wom, rcp_eta, cos_theta_t);

--- a/src/appleseed/renderer/modeling/environmentedf/hosekenvironmentedf.cpp	2022-02-03 14:23:35.654431413 +0000
+++ b/src/appleseed/renderer/modeling/environmentedf/hosekenvironmentedf.cpp	2022-02-03 14:32:52.526678528 +0000
@@ -274,7 +274,7 @@
             float                   coeffs[3 * 9],
             float                   master_Y[3])
         {
-            const float clamped_turbidity = clamp(turbidity, 1.0f, 10.0f) - 1.0f;
+            const float clamped_turbidity = foundation::clamp(turbidity, 1.0f, 10.0f) - 1.0f;
             const size_t turbidity_low = truncate<size_t>(clamped_turbidity);
             const size_t turbidity_high = min(turbidity_low + 1, size_t(9));
             const float turbidity_interp = clamped_turbidity - turbidity_low;

--- a/src/appleseed/renderer/modeling/environmentedf/preethamenvironmentedf.cpp	2022-02-03 14:23:35.655431423 +0000
+++ b/src/appleseed/renderer/modeling/environmentedf/preethamenvironmentedf.cpp	2022-02-03 14:31:55.831143637 +0000
@@ -377,7 +377,7 @@
             }

             const float rcp_cos_theta = 1.0f / outgoing.y;
-            const float cos_gamma = clamp(dot(outgoing, m_sun_dir), -1.0f, 1.0f);
+            const float cos_gamma = foundation::clamp(dot(outgoing, m_sun_dir), -1.0f, 1.0f);
             const float gamma = acos(cos_gamma);

             Color3f xyY;

--- a/src/appleseed/renderer/modeling/input/texturesource.cpp	2022-02-03 14:23:35.659431460 +0000
+++ b/src/appleseed/renderer/modeling/input/texturesource.cpp	2022-02-03 14:32:22.670396850 +0000
@@ -369,8 +369,8 @@
     {
       case TextureFilteringNearest:
         {
-            p.x = clamp(p.x * m_scalar_canvas_width, 0.0f, m_max_x);
-            p.y = clamp(p.y * m_scalar_canvas_height, 0.0f, m_max_y);
+            p.x = foundation::clamp(p.x * m_scalar_canvas_width, 0.0f, m_max_x);
+            p.y = foundation::clamp(p.y * m_scalar_canvas_height, 0.0f, m_max_y);

             const size_t ix = truncate<size_t>(p.x);
             const size_t iy = truncate<size_t>(p.y);

--- a/src/appleseed/renderer/modeling/postprocessingstage/colormappostprocessingstage.cpp	2022-02-03 14:23:35.686431712 +0000
+++ b/src/appleseed/renderer/modeling/postprocessingstage/colormappostprocessingstage.cpp	2022-02-03 14:33:30.864040220 +0000
@@ -308,7 +308,7 @@
             // Compute the width of the legend bar in pixels.
             const size_t legend_bar_width =
                 truncate<size_t>(
-                    clamp(
+                    foundation::clamp(
                         LegendBarWidthPercent * props.m_canvas_width / 100.0f,
                         LegendBarMinWidth,
                         LegendBarMaxWidth));

--- a/src/appleseed/renderer/utility/transformsequence.cpp	2022-02-03 14:23:35.708431918 +0000
+++ b/src/appleseed/renderer/utility/transformsequence.cpp	2022-02-03 14:34:01.471328983 +0000
@@ -560,7 +560,7 @@
     else
     {
         const Vector3d v = perp / perp_norm;
-        const double sin_a = clamp(perp_norm, -1.0, 1.0);
+        const double sin_a = foundation::clamp(perp_norm, -1.0, 1.0);
         const double cos_a = sqrt(1.0 - sin_a * sin_a);
         axis_to_z.set_local_to_parent(Matrix4d::make_rotation(v, cos_a, +sin_a));
         axis_to_z.set_parent_to_local(Matrix4d::make_rotation(v, cos_a, -sin_a));
