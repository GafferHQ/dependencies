import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtWebEngine 1.2'

Module {
    dependencies: []
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 1; type: "bool" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOrigin"; type: "TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 1
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 1
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 1
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 1; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        name: "QQuickWebEngineCertificateError"
        prototype: "QObject"
        exports: ["QtWebEngine/WebEngineCertificateError 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Error"
            values: {
                "SslPinnedKeyNotInCertificateChain": -150,
                "CertificateCommonNameInvalid": -200,
                "CertificateDateInvalid": -201,
                "CertificateAuthorityInvalid": -202,
                "CertificateContainsErrors": -203,
                "CertificateNoRevocationMechanism": -204,
                "CertificateUnableToCheckRevocation": -205,
                "CertificateRevoked": -206,
                "CertificateInvalid": -207,
                "CertificateWeakSignatureAlgorithm": -208,
                "CertificateNonUniqueName": -210,
                "CertificateWeakKey": -211,
                "CertificateNameConstraintViolation": -212
            }
        }
        Property { name: "url"; type: "QUrl"; isReadonly: true }
        Property { name: "error"; type: "Error"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "overridable"; type: "bool"; isReadonly: true }
        Method { name: "defer" }
        Method { name: "ignoreCertificateError" }
        Method { name: "rejectCertificate" }
    }
    Component {
        name: "QQuickWebEngineDownloadItem"
        prototype: "QObject"
        exports: ["QtWebEngine/WebEngineDownloadItem 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DownloadState"
            values: {
                "DownloadRequested": 0,
                "DownloadInProgress": 1,
                "DownloadCompleted": 2,
                "DownloadCancelled": 3,
                "DownloadInterrupted": 4
            }
        }
        Property { name: "id"; type: "uint"; isReadonly: true }
        Property { name: "state"; type: "DownloadState"; isReadonly: true }
        Property { name: "totalBytes"; type: "qlonglong"; isReadonly: true }
        Property { name: "receivedBytes"; type: "qlonglong"; isReadonly: true }
        Property { name: "path"; type: "string" }
        Method { name: "accept" }
        Method { name: "cancel" }
    }
    Component {
        name: "QQuickWebEngineFullScreenRequest"
        exports: ["QtWebEngine/FullScreenRequest 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "origin"; type: "QUrl"; isReadonly: true }
        Property { name: "toggleOn"; type: "bool"; isReadonly: true }
        Method { name: "accept" }
        Method { name: "reject" }
    }
    Component {
        name: "QQuickWebEngineHistory"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtWebEngine/NavigationHistory 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property {
            name: "items"
            type: "QQuickWebEngineHistoryListModel"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "backItems"
            type: "QQuickWebEngineHistoryListModel"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "forwardItems"
            type: "QQuickWebEngineHistoryListModel"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QQuickWebEngineHistoryListModel"
        prototype: "QAbstractListModel"
        exports: ["QtWebEngine/NavigationHistoryListModel 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QQuickWebEngineLoadRequest"
        prototype: "QObject"
        exports: ["QtWebEngine/WebEngineLoadRequest 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "QUrl"; isReadonly: true }
        Property { name: "status"; type: "QQuickWebEngineView::LoadStatus"; isReadonly: true }
        Property { name: "errorString"; type: "string"; isReadonly: true }
        Property { name: "errorDomain"; type: "QQuickWebEngineView::ErrorDomain"; isReadonly: true }
        Property { name: "errorCode"; type: "int"; isReadonly: true }
    }
    Component {
        name: "QQuickWebEngineNavigationRequest"
        prototype: "QObject"
        exports: ["QtWebEngine/WebEngineNavigationRequest 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "QUrl"; isReadonly: true }
        Property { name: "isMainFrame"; type: "bool"; isReadonly: true }
        Property { name: "action"; type: "QQuickWebEngineView::NavigationRequestAction" }
        Property {
            name: "navigationType"
            type: "QQuickWebEngineView::NavigationType"
            isReadonly: true
        }
    }
    Component {
        name: "QQuickWebEngineNewViewRequest"
        prototype: "QObject"
        exports: ["QtWebEngine/WebEngineNewViewRequest 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property {
            name: "destination"
            type: "QQuickWebEngineView::NewViewDestination"
            isReadonly: true
        }
        Property { name: "userInitiated"; type: "bool"; isReadonly: true }
        Method {
            name: "openIn"
            Parameter { name: "view"; type: "QQuickWebEngineView"; isPointer: true }
        }
    }
    Component {
        name: "QQuickWebEngineProfile"
        prototype: "QObject"
        exports: [
            "QtWebEngine/WebEngineProfile 1.1",
            "QtWebEngine/WebEngineProfile 1.2"
        ]
        exportMetaObjectRevisions: [0, 1]
        Enum {
            name: "HttpCacheType"
            values: {
                "MemoryHttpCache": 0,
                "DiskHttpCache": 1
            }
        }
        Enum {
            name: "PersistentCookiesPolicy"
            values: {
                "NoPersistentCookies": 0,
                "AllowPersistentCookies": 1,
                "ForcePersistentCookies": 2
            }
        }
        Property { name: "storageName"; type: "string" }
        Property { name: "offTheRecord"; type: "bool" }
        Property { name: "persistentStoragePath"; type: "string" }
        Property { name: "cachePath"; type: "string" }
        Property { name: "httpUserAgent"; type: "string" }
        Property { name: "httpCacheType"; type: "HttpCacheType" }
        Property { name: "httpAcceptLanguage"; type: "string" }
        Property { name: "persistentCookiesPolicy"; type: "PersistentCookiesPolicy" }
        Property { name: "httpCacheMaximumSize"; type: "int" }
        Signal { name: "httpAcceptLanguageChanged"; revision: 1 }
        Signal {
            name: "downloadRequested"
            Parameter { name: "download"; type: "QQuickWebEngineDownloadItem"; isPointer: true }
        }
        Signal {
            name: "downloadFinished"
            Parameter { name: "download"; type: "QQuickWebEngineDownloadItem"; isPointer: true }
        }
        Method { name: "cookieStore"; revision: 1; type: "QWebEngineCookieStore*" }
    }
    Component {
        name: "QQuickWebEngineScript"
        prototype: "QObject"
        exports: ["QtWebEngine/WebEngineScript 1.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InjectionPoint"
            values: {
                "Deferred": 0,
                "DocumentReady": 1,
                "DocumentCreation": 2
            }
        }
        Enum {
            name: "ScriptWorldId"
            values: {
                "MainWorld": 0,
                "ApplicationWorld": 1,
                "UserWorld": 2
            }
        }
        Property { name: "name"; type: "string" }
        Property { name: "sourceUrl"; type: "QUrl" }
        Property { name: "sourceCode"; type: "string" }
        Property { name: "injectionPoint"; type: "InjectionPoint" }
        Property { name: "worldId"; type: "ScriptWorldId" }
        Property { name: "runOnSubframes"; type: "bool" }
        Signal {
            name: "nameChanged"
            Parameter { name: "arg"; type: "string" }
        }
        Signal {
            name: "sourceUrlChanged"
            Parameter { name: "arg"; type: "QUrl" }
        }
        Signal {
            name: "sourceCodeChanged"
            Parameter { name: "arg"; type: "string" }
        }
        Signal {
            name: "injectionPointChanged"
            Parameter { name: "arg"; type: "InjectionPoint" }
        }
        Signal {
            name: "worldIdChanged"
            Parameter { name: "arg"; type: "ScriptWorldId" }
        }
        Signal {
            name: "runOnSubframesChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "setName"
            Parameter { name: "arg"; type: "string" }
        }
        Method {
            name: "setSourceUrl"
            Parameter { name: "arg"; type: "QUrl" }
        }
        Method {
            name: "setSourceCode"
            Parameter { name: "arg"; type: "string" }
        }
        Method {
            name: "setInjectionPoint"
            Parameter { name: "arg"; type: "InjectionPoint" }
        }
        Method {
            name: "setWorldId"
            Parameter { name: "arg"; type: "ScriptWorldId" }
        }
        Method {
            name: "setRunOnSubframes"
            Parameter { name: "arg"; type: "bool" }
        }
        Method { name: "toString"; type: "string" }
    }
    Component {
        name: "QQuickWebEngineSettings"
        prototype: "QObject"
        exports: [
            "QtWebEngine/WebEngineSettings 1.1",
            "QtWebEngine/WebEngineSettings 1.2"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [0, 1]
        Property { name: "autoLoadImages"; type: "bool" }
        Property { name: "javascriptEnabled"; type: "bool" }
        Property { name: "javascriptCanOpenWindows"; type: "bool" }
        Property { name: "javascriptCanAccessClipboard"; type: "bool" }
        Property { name: "linksIncludedInFocusChain"; type: "bool" }
        Property { name: "localStorageEnabled"; type: "bool" }
        Property { name: "localContentCanAccessRemoteUrls"; type: "bool" }
        Property { name: "spatialNavigationEnabled"; type: "bool" }
        Property { name: "localContentCanAccessFileUrls"; type: "bool" }
        Property { name: "hyperlinkAuditingEnabled"; type: "bool" }
        Property { name: "errorPageEnabled"; type: "bool" }
        Property { name: "pluginsEnabled"; type: "bool" }
        Property { name: "fullScreenSupportEnabled"; revision: 1; type: "bool" }
        Property { name: "defaultTextEncoding"; type: "string" }
        Signal { name: "fullScreenSupportEnabledChanged"; revision: 1 }
    }
    Component {
        name: "QQuickWebEngineSingleton"
        prototype: "QObject"
        exports: ["QtWebEngine/WebEngine 1.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "settings"; type: "QQuickWebEngineSettings"; isReadonly: true; isPointer: true }
        Property {
            name: "defaultProfile"
            revision: 1
            type: "QQuickWebEngineProfile"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QQuickWebEngineView"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtWebEngine/WebEngineView 1.0",
            "QtWebEngine/WebEngineView 1.1",
            "QtWebEngine/WebEngineView 1.2"
        ]
        exportMetaObjectRevisions: [0, 1, 2]
        Enum {
            name: "NavigationRequestAction"
            values: {
                "AcceptRequest": 0,
                "IgnoreRequest": 255
            }
        }
        Enum {
            name: "NavigationType"
            values: {
                "LinkClickedNavigation": 0,
                "TypedNavigation": 1,
                "FormSubmittedNavigation": 2,
                "BackForwardNavigation": 3,
                "ReloadNavigation": 4,
                "OtherNavigation": 5
            }
        }
        Enum {
            name: "LoadStatus"
            values: {
                "LoadStartedStatus": 0,
                "LoadStoppedStatus": 1,
                "LoadSucceededStatus": 2,
                "LoadFailedStatus": 3
            }
        }
        Enum {
            name: "ErrorDomain"
            values: {
                "NoErrorDomain": 0,
                "InternalErrorDomain": 1,
                "ConnectionErrorDomain": 2,
                "CertificateErrorDomain": 3,
                "HttpErrorDomain": 4,
                "FtpErrorDomain": 5,
                "DnsErrorDomain": 6
            }
        }
        Enum {
            name: "NewViewDestination"
            values: {
                "NewViewInWindow": 0,
                "NewViewInTab": 1,
                "NewViewInDialog": 2,
                "NewViewInBackgroundTab": 3
            }
        }
        Enum {
            name: "Feature"
            values: {
                "MediaAudioCapture": 0,
                "MediaVideoCapture": 1,
                "MediaAudioVideoCapture": 2,
                "Geolocation": 3
            }
        }
        Enum {
            name: "WebAction"
            values: {
                "NoWebAction": -1,
                "Back": 0,
                "Forward": 1,
                "Stop": 2,
                "Reload": 3,
                "Cut": 4,
                "Copy": 5,
                "Paste": 6,
                "Undo": 7,
                "Redo": 8,
                "SelectAll": 9,
                "ReloadAndBypassCache": 10,
                "PasteAndMatchStyle": 11,
                "OpenLinkInThisWindow": 12,
                "OpenLinkInNewWindow": 13,
                "OpenLinkInNewTab": 14,
                "CopyLinkToClipboard": 15,
                "DownloadLinkToDisk": 16,
                "CopyImageToClipboard": 17,
                "CopyImageUrlToClipboard": 18,
                "DownloadImageToDisk": 19,
                "CopyMediaUrlToClipboard": 20,
                "ToggleMediaControls": 21,
                "ToggleMediaLoop": 22,
                "ToggleMediaPlayPause": 23,
                "ToggleMediaMute": 24,
                "DownloadMediaToDisk": 25,
                "InspectElement": 26,
                "ExitFullScreen": 27,
                "RequestClose": 28,
                "WebActionCount": 29
            }
        }
        Enum {
            name: "JavaScriptConsoleMessageLevel"
            values: {
                "InfoMessageLevel": 0,
                "WarningMessageLevel": 1,
                "ErrorMessageLevel": 2
            }
        }
        Enum {
            name: "RenderProcessTerminationStatus"
            values: {
                "NormalTerminationStatus": 0,
                "AbnormalTerminationStatus": 1,
                "CrashedTerminationStatus": 2,
                "KilledTerminationStatus": 3
            }
        }
        Enum {
            name: "FindFlags"
            values: {
                "FindBackward": 1,
                "FindCaseSensitively": 2
            }
        }
        Property { name: "url"; type: "QUrl" }
        Property { name: "icon"; type: "QUrl"; isReadonly: true }
        Property { name: "loading"; type: "bool"; isReadonly: true }
        Property { name: "loadProgress"; type: "int"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "canGoBack"; type: "bool"; isReadonly: true }
        Property { name: "canGoForward"; type: "bool"; isReadonly: true }
        Property { name: "isFullScreen"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "zoomFactor"; revision: 1; type: "double" }
        Property { name: "profile"; revision: 1; type: "QQuickWebEngineProfile"; isPointer: true }
        Property {
            name: "settings"
            revision: 1
            type: "QQuickWebEngineSettings"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "navigationHistory"
            revision: 1
            type: "QQuickWebEngineHistory"
            isReadonly: true
            isPointer: true
        }
        Property { name: "webChannel"; revision: 1; type: "QQmlWebChannel"; isPointer: true }
        Property {
            name: "userScripts"
            revision: 1
            type: "QQuickWebEngineScript"
            isList: true
            isReadonly: true
        }
        Property { name: "activeFocusOnPress"; revision: 2; type: "bool" }
        Property { name: "backgroundColor"; revision: 2; type: "QColor" }
        Signal {
            name: "loadingChanged"
            Parameter { name: "loadRequest"; type: "QQuickWebEngineLoadRequest"; isPointer: true }
        }
        Signal {
            name: "linkHovered"
            Parameter { name: "hoveredUrl"; type: "QUrl" }
        }
        Signal {
            name: "navigationRequested"
            Parameter { name: "request"; type: "QQuickWebEngineNavigationRequest"; isPointer: true }
        }
        Signal {
            name: "javaScriptConsoleMessage"
            Parameter { name: "level"; type: "JavaScriptConsoleMessageLevel" }
            Parameter { name: "message"; type: "string" }
            Parameter { name: "lineNumber"; type: "int" }
            Parameter { name: "sourceID"; type: "string" }
        }
        Signal {
            name: "certificateError"
            revision: 1
            Parameter { name: "error"; type: "QQuickWebEngineCertificateError"; isPointer: true }
        }
        Signal {
            name: "fullScreenRequested"
            revision: 1
            Parameter { name: "request"; type: "QQuickWebEngineFullScreenRequest" }
        }
        Signal { name: "isFullScreenChanged"; revision: 1 }
        Signal {
            name: "featurePermissionRequested"
            revision: 1
            Parameter { name: "securityOrigin"; type: "QUrl" }
            Parameter { name: "feature"; type: "Feature" }
        }
        Signal {
            name: "newViewRequested"
            revision: 1
            Parameter { name: "request"; type: "QQuickWebEngineNewViewRequest"; isPointer: true }
        }
        Signal {
            name: "zoomFactorChanged"
            revision: 1
            Parameter { name: "arg"; type: "double" }
        }
        Signal { name: "profileChanged"; revision: 1 }
        Signal { name: "webChannelChanged"; revision: 1 }
        Signal {
            name: "activeFocusOnPressChanged"
            revision: 2
            Parameter { type: "bool" }
        }
        Signal { name: "backgroundColorChanged"; revision: 2 }
        Signal {
            name: "renderProcessTerminated"
            revision: 2
            Parameter { name: "terminationStatus"; type: "RenderProcessTerminationStatus" }
            Parameter { name: "exitCode"; type: "int" }
        }
        Signal { name: "windowCloseRequested"; revision: 2 }
        Method {
            name: "runJavaScript"
            Parameter { type: "string" }
            Parameter { type: "QJSValue" }
        }
        Method {
            name: "runJavaScript"
            Parameter { type: "string" }
        }
        Method {
            name: "loadHtml"
            Parameter { name: "html"; type: "string" }
            Parameter { name: "baseUrl"; type: "QUrl" }
        }
        Method {
            name: "loadHtml"
            Parameter { name: "html"; type: "string" }
        }
        Method { name: "goBack" }
        Method { name: "goForward" }
        Method {
            name: "goBackOrForward"
            revision: 1
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "reload" }
        Method { name: "reloadAndBypassCache"; revision: 1 }
        Method { name: "stop" }
        Method {
            name: "findText"
            revision: 1
            Parameter { name: "subString"; type: "string" }
            Parameter { name: "options"; type: "FindFlags" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "findText"
            revision: 1
            Parameter { name: "subString"; type: "string" }
            Parameter { name: "options"; type: "FindFlags" }
        }
        Method {
            name: "findText"
            revision: 1
            Parameter { name: "subString"; type: "string" }
        }
        Method { name: "fullScreenCancelled"; revision: 1 }
        Method {
            name: "grantFeaturePermission"
            revision: 1
            Parameter { name: "securityOrigin"; type: "QUrl" }
            Parameter { type: "Feature" }
            Parameter { name: "granted"; type: "bool" }
        }
        Method {
            name: "setActiveFocusOnPress"
            revision: 2
            Parameter { name: "arg"; type: "bool" }
        }
        Method {
            name: "triggerWebAction"
            revision: 2
            Parameter { name: "action"; type: "WebAction" }
        }
    }
}
