/*
 * Copyright (C) 2010 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://xhr.spec.whatwg.org/#interface-formdata

// TODO(philipj): The FormDataEntryValue typedef should use Blob, not File.
typedef (File or USVString) FormDataEntryValue;

[
    Constructor(optional HTMLFormElement form),
    Exposed=(Window,Worker),
    GarbageCollected,
    ImplementedAs=DOMFormData,
] interface FormData {
    // TODO(philipj): The value argument should be FormDataEntryValue and there
    // should be no optional filename argument. crbug.com/498790
    [CallWith=ExecutionContext] void append(USVString name, Blob value, optional USVString filename);
    void append(USVString name, USVString value);

    [RuntimeEnabled=FormDataNewMethods, ImplementedAs=deleteEntry] void delete(USVString name);
    [RuntimeEnabled=FormDataNewMethods] FormDataEntryValue? get(USVString name);
    [RuntimeEnabled=FormDataNewMethods] sequence<FormDataEntryValue> getAll(USVString name);
    [RuntimeEnabled=FormDataNewMethods, ImplementedAs=hasEntry] boolean has(USVString name);
    // TODO(philipj): The value argument should be FormDataEntryValue and there
    // should be no optional filename argument.
    [RuntimeEnabled=FormDataNewMethods] void set(USVString name, Blob value, optional USVString filename);
    [RuntimeEnabled=FormDataNewMethods] void set(USVString name, USVString value);
    [RuntimeEnabled=FormDataNewMethods] iterable<USVString, FormDataEntryValue>;
};
