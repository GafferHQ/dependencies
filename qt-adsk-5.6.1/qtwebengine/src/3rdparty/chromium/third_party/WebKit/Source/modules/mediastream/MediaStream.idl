/*
 * Copyright (C) 2011 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// http://dev.w3.org/2011/webrtc/editor/getusermedia.html#idl-def-MediaStream

[
    GarbageCollected,
    Constructor,
    Constructor(MediaStream stream),
    Constructor(MediaStreamTrack[] tracks),
    ConstructorCallWith=ExecutionContext,
    NoInterfaceObject,
] interface MediaStream : EventTarget {
    // DEPRECATED
    [DeprecateAs=MediaStreamLabel] readonly attribute DOMString label;

    readonly attribute DOMString id;

    sequence<MediaStreamTrack> getAudioTracks();
    sequence<MediaStreamTrack> getVideoTracks();
    sequence<MediaStreamTrack> getTracks();

    [RaisesException] void addTrack(MediaStreamTrack track);
    [RaisesException] void removeTrack(MediaStreamTrack track);
    MediaStreamTrack getTrackById(DOMString trackId);
    [CallWith=ExecutionContext] MediaStream clone();
    // DEPRECATED
    [DeprecateAs=MediaStreamEnded] readonly attribute boolean ended;

    readonly attribute boolean active;

    // DEPRECATED
    [DeprecateAs=MediaStreamStop] void stop();

    attribute EventHandler onactive;
    attribute EventHandler oninactive;
    //  DEPRECATED
    attribute EventHandler onended;

    attribute EventHandler onaddtrack;
    attribute EventHandler onremovetrack;
};
