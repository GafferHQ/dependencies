{%- for method in interface.methods %}
const int k{{interface|name}}_{{method|name}}_name = {{method.ordinal}};
{%- endfor %}

const String {{interface|name}}Name =
      '{{namespace|replace(".","::")}}::{{interface.name}}';

abstract class {{interface|name}} {
{%- for method in interface.methods %}
{%- if method.response_parameters == None %}
  void {{method|name}}(
    {%- for parameter in method.parameters -%}
      {{parameter.kind|dart_type}} {{parameter|name}}{% if not loop.last %}, {% endif %}
    {%- endfor -%}
    );
{%- else %}
{%- set response_struct = method.response_param_struct %}
  Future<{{response_struct|name}}> {{method|name}}(
  {%- for parameter in method.parameters -%}
    {{parameter.kind|dart_type}} {{parameter|name}},
  {%- endfor -%}
    [Function responseFactory = null]);
{%- endif %}
{%- endfor %}

{#--- Interface Constants #}
{% for constant in interface.constants %}
  static const {{constant|name}} = {{constant.value|expression_to_text}};
{%-   endfor %}

{#--- Interface Enums #}
{%- from "enum_definition.tmpl" import enum_def -%}
{%- for enum in interface.enums %}
  {{ enum_def("  static ", enum) }}
{%-  endfor %}
}


class {{interface|name}}ProxyImpl extends bindings.Proxy {
  {{interface|name}}ProxyImpl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  {{interface|name}}ProxyImpl.fromHandle(core.MojoHandle handle) :
      super.fromHandle(handle);

  {{interface|name}}ProxyImpl.unbound() : super.unbound();

  static {{interface|name}}ProxyImpl newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For {{interface|name}}ProxyImpl"));
    return new {{interface|name}}ProxyImpl.fromEndpoint(endpoint);
  }

  String get name => {{interface|name}}Name;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
{%- for method in interface.methods %}
{%- if method.response_parameters != None %}
{%- set response_struct = method.response_param_struct %}
      case k{{interface|name}}_{{method|name}}_name:
        var r = {{response_struct|name}}.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          throw 'Expected a message with a valid request Id.';
        }
        Completer c = completerMap[message.header.requestId];
        if (c == null) {
          throw 'Message had unknown request Id: ${message.header.requestId}';
        }
        completerMap.remove(message.header.requestId);
        assert(!c.isCompleted);
        c.complete(r);
        break;
{%- endif %}
{%- endfor %}
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  String toString() {
    var superString = super.toString();
    return "{{interface|name}}ProxyImpl($superString)";
  }
}


class _{{interface|name}}ProxyCalls implements {{interface|name}} {
  {{interface|name}}ProxyImpl _proxyImpl;

  _{{interface|name}}ProxyCalls(this._proxyImpl);

  {%- for method in interface.methods %}
  {%- if method.response_parameters == None %}
    void {{method|name}}(
  {%- for parameter in method.parameters -%}
      {{parameter.kind|dart_type}} {{parameter|name}}{% if not loop.last %}, {% endif %}
  {%- endfor -%}
  {%- set request_struct = method.param_struct -%}
    ) {
      assert(_proxyImpl.isBound);
      var params = new {{request_struct|name}}();
  {%- for parameter in method.parameters %}
      params.{{parameter|name}} = {{parameter|name}};
  {%- endfor %}
      _proxyImpl.sendMessage(params, k{{interface|name}}_{{method|name}}_name);
    }
  {% else %}
  {%- set response_struct = method.response_param_struct %}
  {%- set request_struct = method.param_struct %}
    Future<{{response_struct|name}}> {{method|name}}(
  {%- for parameter in method.parameters -%}
      {{parameter.kind|dart_type}} {{parameter|name}},
  {%- endfor -%}
      [Function responseFactory = null]) {
      assert(_proxyImpl.isBound);
      var params = new {{request_struct|name}}();
  {%- for parameter in method.parameters %}
      params.{{parameter|name}} = {{parameter|name}};
  {%- endfor %}
      return _proxyImpl.sendMessageWithRequestId(
          params,
          k{{interface|name}}_{{method|name}}_name,
          -1,
          bindings.MessageHeader.kMessageExpectsResponse);
    }
  {%- endif %}
  {%- endfor %}
}


class {{interface|name}}Proxy implements bindings.ProxyBase {
  final bindings.Proxy impl;
  {{interface|name}} ptr;
  final String name = {{interface|name}}Name;

  {{interface|name}}Proxy({{interface|name}}ProxyImpl proxyImpl) :
      impl = proxyImpl,
      ptr = new _{{interface|name}}ProxyCalls(proxyImpl);

  {{interface|name}}Proxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) :
      impl = new {{interface|name}}ProxyImpl.fromEndpoint(endpoint) {
    ptr = new _{{interface|name}}ProxyCalls(impl);
  }

  {{interface|name}}Proxy.fromHandle(core.MojoHandle handle) :
      impl = new {{interface|name}}ProxyImpl.fromHandle(handle) {
    ptr = new _{{interface|name}}ProxyCalls(impl);
  }

  {{interface|name}}Proxy.unbound() :
      impl = new {{interface|name}}ProxyImpl.unbound() {
    ptr = new _{{interface|name}}ProxyCalls(impl);
  }

  static {{interface|name}}Proxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For {{interface|name}}Proxy"));
    return new {{interface|name}}Proxy.fromEndpoint(endpoint);
  }

  Future close({bool immediate: false}) => impl.close(immediate: immediate);

  int get version => impl.version;

  Future<int> queryVersion() => impl.queryVersion();

  void requireVersion(int requiredVersion) {
    impl.requireVersion(requiredVersion);
  }

  String toString() {
    return "{{interface|name}}Proxy($impl)";
  }
}


class {{interface|name}}Stub extends bindings.Stub {
  {{interface|name}} _impl = null;

  {{interface|name}}Stub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [this._impl])
      : super.fromEndpoint(endpoint);

  {{interface|name}}Stub.fromHandle(core.MojoHandle handle, [this._impl])
      : super.fromHandle(handle);

  {{interface|name}}Stub.unbound() : super.unbound();

  static {{interface|name}}Stub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For {{interface|name}}Stub"));
    return new {{interface|name}}Stub.fromEndpoint(endpoint);
  }

  static const String name = {{interface|name}}Name;

{% for method in interface.methods %}
{%- if method.response_parameters != None %}
{%- set response_struct = method.response_param_struct %}
  {{response_struct|name}} _{{response_struct|name}}Factory(
    {%- for param in method.response_parameters -%}
      {{param.kind|dart_type}} {{param|name}}{% if not loop.last %}, {% endif %}
    {%- endfor -%}
  ) {
    var result = new {{response_struct|name}}();
    {%- for param in method.response_parameters %}
    result.{{param|name}} = {{param|name}};
    {%- endfor %}
    return result;
  }
{%- endif %}
{%- endfor %}

  Future<bindings.Message> handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      return bindings.ControlMessageHandler.handleMessage(this,
                                                          {{interface.version}},
                                                          message);
    }
    assert(_impl != null);
    switch (message.header.type) {
{%- for method in interface.methods %}
{%- set request_struct = method.param_struct %}
      case k{{interface|name}}_{{method|name}}_name:
        var params = {{request_struct|name}}.deserialize(
            message.payload);
{%- if method.response_parameters == None %}
        _impl.{{method|name}}(
          {%- for parameter in method.parameters -%}
              params.{{parameter|name}}{% if not loop.last %}, {% endif %}
          {%- endfor -%}
        );
{%- else %}
{%- set response_struct = method.response_param_struct %}
        return _impl.{{method|name}}(
          {%- for parameter in method.parameters -%}
              params.{{parameter|name}},
          {%- endfor -%}
          _{{response_struct|name}}Factory).then((response) {
          if (response != null) {
            return buildResponseWithId(
                response,
                k{{interface|name}}_{{method|name}}_name,
                message.header.requestId,
                bindings.MessageHeader.kMessageIsResponse);
          }
        });
{%- endif %}
        break;
{%- endfor %}
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
    return null;
  }

  {{interface|name}} get impl => _impl;
  set impl({{interface|name}} d) {
    assert(_impl == null);
    _impl = d;
  }

  String toString() {
    var superString = super.toString();
    return "{{interface|name}}Stub($superString)";
  }

  int get version => {{interface.version}};
}
