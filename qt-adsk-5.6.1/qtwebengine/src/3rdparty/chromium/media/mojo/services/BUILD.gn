# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//media/media_options.gni")
import("//testing/test.gni")
import("//mojo/public/mojo_application.gni")

# Target naming conventions:
# - converters: C++/Mojo type converters.
# - proxy: C++ implementations supported by mojo services.
# - service: Mojo interface implementations.
# - unittests: Unit tests for a particular class/file.
# - test: Tests for a particular app, e.g. media.

config("enable_mojo_media_config") {
  assert(enable_mojo_media == "none" || enable_mojo_media == "browser" ||
         enable_mojo_media == "utility")

  if (enable_mojo_media != "none") {
    defines = [ "ENABLE_MOJO_MEDIA" ]
  }

  if (enable_mojo_media == "browser") {
    defines += [ "ENABLE_MOJO_MEDIA_IN_BROWSER_PROCESS" ]
  } else if (enable_mojo_media == "utility") {
    defines += [ "ENABLE_MOJO_MEDIA_IN_UTILITY_PROCESS" ]
  }
}

source_set("converters") {
  sources = [
    "media_type_converters.cc",
    "media_type_converters.h",
  ]

  deps = [
    "//base",
    "//media",
    "//media/mojo/interfaces",
    "//mojo/common",
    "//mojo/converters/geometry",
    "//mojo/environment:chromium",
    "//third_party/mojo/src/mojo/public/c/system:for_component",
    "//ui/mojo/geometry:interfaces",
  ]
}

# Implementations of media C++ interfaces using corresponding mojo services.
source_set("proxy") {
  sources = [
    "mojo_cdm.cc",
    "mojo_cdm.h",
    "mojo_cdm_factory.cc",
    "mojo_cdm_factory.h",
    "mojo_demuxer_stream_impl.cc",
    "mojo_demuxer_stream_impl.h",
    "mojo_renderer_factory.cc",
    "mojo_renderer_factory.h",
    "mojo_renderer_impl.cc",
    "mojo_renderer_impl.h",
    "mojo_type_trait.h",
  ]

  public_configs = [ ":enable_mojo_media_config" ]

  deps = [
    ":converters",
    "//base",
    "//media",
    "//media/mojo/interfaces",
    "//mojo/application/public/interfaces",
    "//mojo/common",
    "//mojo/environment:chromium",
    "//third_party/mojo/src/mojo/public/c/system:for_component",
  ]
}

source_set("cdm_service") {
  deps = [
    ":converters",
    "//base",
    "//media",
    "//media/mojo/interfaces",
    "//mojo/application/public/interfaces",
    "//mojo/common",
    "//mojo/environment:chromium",
    "//third_party/mojo/src/mojo/public/c/system:for_component",
  ]

  sources = [
    "mojo_cdm_promise.cc",
    "mojo_cdm_promise.h",
    "mojo_cdm_service.cc",
    "mojo_cdm_service.h",
    "mojo_cdm_service_context.cc",
    "mojo_cdm_service_context.h",
    "mojo_type_trait.h",
  ]

  configs += [ "//build/config/compiler:no_size_t_to_int_warning" ]
}

# MediaRenderer service; without a specific config.
source_set("renderer_service_generic") {
  sources = [
    "demuxer_stream_provider_shim.cc",
    "demuxer_stream_provider_shim.h",
    "mojo_demuxer_stream_adapter.cc",
    "mojo_demuxer_stream_adapter.h",
    "mojo_media_client.cc",
    "mojo_media_client.h",
    "mojo_renderer_service.cc",
    "mojo_renderer_service.h",
  ]

  deps = [
    ":converters",
    "//base",
    "//media",
    "//media/mojo/interfaces",
    "//media:shared_memory_support",
    "//mojo/common",
  ]
}

# MediaRenderer service with a default config.
source_set("renderer_service") {
  sources = [
    "default_mojo_media_client.cc",
  ]

  public_configs = [ ":enable_mojo_media_config" ]

  deps = [
    ":renderer_service_generic",
    "//base",
    "//media",
    "//media:shared_memory_support",
  ]
}

source_set("application") {
  sources = [
    "mojo_media_application.cc",
    "mojo_media_application.h",
  ]

  public_configs = [ ":enable_mojo_media_config" ]

  deps = [
    ":cdm_service",
    ":renderer_service",
    "//base",
    "//mojo/application/public/cpp",
    "//third_party/mojo/src/mojo/public/c/system:for_component",
  ]
}

test("media_mojo_unittests") {
  sources = [
    "media_type_converters_unittest.cc",
  ]

  deps = [
    ":converters",
    "//base",
    "//base/test:test_support",
    "//media",
    "//media/mojo/interfaces",
    "//mojo/environment:chromium",
    "//testing/gtest",
    "//third_party/mojo/src/mojo/edk/system",
    "//third_party/mojo/src/mojo/edk/test:run_all_unittests",
  ]
}

if (!is_component_build) {
  mojo_native_application("media") {
    sources = [
      "main.cc",
    ]

    deps = [
      ":application",
      "//third_party/mojo/src/mojo/public/c/system:for_shared_library",
    ]
  }

  # Note, the following tests must be loaded via mojo_runner as an app, e.g.
  #
  #   out/Debug/mojo_runner mojo:media_apptests
  #   out/Debug/mojo_runner mojo:media_pipeline_integration_apptests
  #
  mojo_native_application("media_apptests") {
    testonly = true

    sources = [
      "media_apptest.cc",
    ]

    deps = [
      ":proxy",
      "//media/base:test_support",
      "//mojo/application/public/cpp:test_support",
      "//testing/gmock",
      "//testing/gtest",
    ]

    data_deps = [ ":media" ]
  }

  mojo_native_application("media_pipeline_integration_apptests") {
    testonly = true

    deps = [
      "//media/test:mojo_pipeline_integration_tests",
    ]

    data_deps = [ ":media" ]
  }
}

group("services") {
  deps = [
    ":proxy",
  ]

  if (!is_component_build) {
    deps += [ ":media" ]
  }
}

group("tests") {
  testonly = true
  deps = [
    ":media_mojo_unittests",
  ]

  if (!is_component_build) {
    deps += [
      ":media_apptests",
      ":media_pipeline_integration_apptests",
    ]
  }
}
