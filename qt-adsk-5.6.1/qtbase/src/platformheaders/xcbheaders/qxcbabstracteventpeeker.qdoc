/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \class QXcbAbstractEventPeeker
    \inmodule QtX11Extras
    \since 5.7
    \brief A class to peek at queued XCB events.

    This class is used together with QX11Info::peekEventQueue().
*/

/*!
    \enum QXcbAbstractEventPeeker::PeekOption

    An enum to alter the default behavior of QX11Info::peekEventQueue().

    \value PeekDefault
    By default, QX11Info::peekEventQueue() optimizes the peeking algorithm by skipping events
    that it already has seen in the previous calls to QX11Info::peekEventQueue(). This is
    done as long as the GUI thread has not read a new event from the event queue
    since the previous call to QX11Info::peekEventQueue(); otherwise, the search starts from
    the beginning of the queue.

    \value PeekFromQueueStart
    Peek from the beginning of the buffered event queue.
*/

/*!
    \fn bool QXcbAbstractEventPeeker::peekEventQueue(xcb_generic_event_t *event)

    This function is called for every event in the XCB event queue.
    The \a event is a native XCB event.

    Return \c false to look at the next queued XCB event. If there are no more events left
    in the queue, the QX11Info::peekEventQueue() function returns. Return \c true to stop
    peeking and return from the QX11Info::peekEventQueue() function.
*/
