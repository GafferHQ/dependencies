/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qtlabscontrols-styles.html
    \title Styling Qt Labs Controls

    Qt Labs Controls comes with a selection of styles. The \l {Default Style}
    {Default} style is a simple and light-weight all-round style that offers
    the maximum performance for Qt Labs Controls. The more advanced
    \l {Universal Style}{Universal} and \l {Material Style}{Material} styles
    offer an appealing design, but require more system resources.

    \section1 Usage

    In order to run an application with a specific style, either pass a command
    line argument, or set an environment variable. Alternatively, the preferred
    style and style-specific attributes can be specified in a configuration file.

    \section2 Command line argument

    Passing a \c -style command line argument is the convenient way to test different
    styles. It takes precedence over the other methods listed below. The following
    example runs a Qt Labs Controls application with the Material style:

    \code
    ./app -style material
    \endcode

    \section2 Environment variable

    Setting the \c QT_LABS_CONTROLS_STYLE environment variable can be used to set
    a system-wide style preference. It takes precedence over the configuration file
    mentioned below. The following example runs a Qt Labs Controls application with
    the Universal style:

    \code
    QT_LABS_CONTROLS_STYLE=universal ./app
    \endcode

    \section2 Configuration file

    Qt Labs Controls support a special configuration file, \c :/qtlabscontrols.conf,
    that is built into an application's resources.

    The configuration file can specify the preferred style (may be overridden by either
    of the methods described earlier) and certain style-specific attributes. The following
    example specifies that the preferred style is the Material style. Furthermore, when the
    application is run with the Material style, its theme is light and the accent color is
    brown. However, if the application is run with the Universal style instead, the theme
    is dark and the accent color is red.

    \code
    [Controls]
    Style=Material

    [Universal]
    Theme=Dark
    Accent=Red

    [Material]
    Theme=Light
    Accent=Brown
    \endcode

    In order to make it possible for Qt Labs Controls to find the configuration file,
    it must be built into application's resources using the \l {The Qt Resource System}.
    Here's an example \c .qrc file:

    \code
    <!DOCTYPE RCC><RCC version="1.0">
    <qresource prefix="/">
        <file>qtlabscontrols.conf</file>
    </qresource>
    </RCC>
    \endcode

    \note Qt Labs Controls uses a file selector to load the configuration file. It
    is possible to provide a different configuration file for different platforms and
    locales. See \l QFileSelector documentation for more details.

    Finally, the \c .qrc file must be listed in the application's \c .pro file so that
    the build system knows about it. For example:

    \code
    RESOURCES = application.qrc
    \endcode

    \section1 Related Information
    \list
    \li \l {Default Style}
    \li \l {Material Style}
    \li \l {Universal Style}
    \endlist
*/
