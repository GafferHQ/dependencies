/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qtlabstemplates-index.html
    \title Qt Labs Templates
    \brief A set of templates to create user interface controls in Qt Quick

    Qt Labs Templates are the foundations of \l {Qt Labs Controls}. Templates
    are non-visual implementations of controls' logic and behavior. They offer
    an interface to visualize the controls in QML using \l {Qt Quick}.

    Even though the templates aim to be as style-agnostic as possible, in some
    cases they have to make certain assumptions about the visual structure of
    a control. For example, a spinbox has buttons that increment and decrement
    the value of the spinbox. In order to implement the behavior of a spinbox,
    the spinbox template needs to know if the user is interacting with the up
    or down button. A visual implementation of the spinbox template merely needs
    to position the up and down buttons and visualize them in normal, pressed,
    and disabled states. Any input event handling and state processing is taken
    care of by the underlying template.

    \section1 Related Information

    \list
      \li \l{Qt Quick}
      \li \l{Qt Labs Controls}
      \li \l{Qt Labs Templates QML Types}
    \endlist
*/
