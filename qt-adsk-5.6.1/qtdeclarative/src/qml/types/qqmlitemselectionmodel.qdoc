/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmltype ItemSelectionModel
    \instantiates QItemSelectionModel
    \inqmlmodule QtQml.Models
    \since 5.5
    \ingroup qtquick-models

    \brief Instantiates a QItemSelectionModel to be used in conjunction
    with a QAbstractItemModel and any view supporting it.

    This page only enumerates the properties, methods, and signals available in QML.
    See \l QItemSelectionModel for the actual documentation of this class.

    \sa QItemSelectionModel, {Models and Views in Qt Quick}
*/


/*!
    \qmlproperty QAbstractItemModel ItemSelectionModel::model

    This property's value must match the view's model.
*/

/*!
    \qmlproperty bool ItemSelectionModel::hasSelection
    \readonly

    It will trigger property binding updates every time \l selectionChanged()
    is emitted, even though its value hasn't changed.

    \sa selection(), selectedIndexes, select(), selectionChanged()
*/

/*!
    \qmlproperty QModelIndex ItemSelectionModel::currentIndex
    \readonly

    Use \l setCurrentIndex() to set its value.

    \sa setCurrentIndex(), currentChanged()
*/

/*!
    \qmlproperty QModelIndexList ItemSelectionModel::selectedIndexes
    \readonly

    Contains the list of all the indexes in the selection model.
*/

/*!
    \qmlmethod bool ItemSelectionModel::isSelected(QModelIndex index)
*/

/*!
    \qmlmethod bool ItemSelectionModel::isRowSelected(int row, QModelIndex parent)
*/

/*!
    \qmlmethod bool ItemSelectionModel::isColumnSelected(int column, QModelIndex parent)
*/

/*!
    \qmlmethod bool ItemSelectionModel::rowIntersectsSelection(int row, QModelIndex parent)
*/

/*!
    \qmlmethod bool ItemSelectionModel::columnIntersectsSelection(int column, QModelIndex parent)
*/

/*!
    \qmlmethod QModelIndexList ItemSelectionModel::selectedRows(int column)
*/

/*!
    \qmlmethod QModelIndexList ItemSelectionModel::selectedColumns(int row)
*/

/*!
    \qmlmethod QItemSelection ItemSelectionModel::selection()
*/

/*!
    \qmlmethod void ItemSelectionModel::setCurrentIndex(QModelIndex index, SelectionFlags command)
*/

/*!
    \qmlmethod void ItemSelectionModel::select(QModelIndex index, SelectionFlags command)
*/

/*!
    \qmlmethod void ItemSelectionModel::select(QItemSelection selection, SelectionFlags command)
*/

/*!
    \qmlmethod void ItemSelectionModel::clear()
*/

/*!
    \qmlmethod void ItemSelectionModel::reset()
*/

/*!
    \qmlmethod void ItemSelectionModel::clearSelection()
*/

/*!
    \qmlmethod void ItemSelectionModel::clearCurrentIndex()
*/

/*!
    \qmlsignal ItemSelectionModel::selectionChanged(QItemSelection selected, QItemSelection deselected)
*/

/*!
    \qmlsignal ItemSelectionModel::currentChanged(QModelIndex current, QModelIndex previous)
*/
