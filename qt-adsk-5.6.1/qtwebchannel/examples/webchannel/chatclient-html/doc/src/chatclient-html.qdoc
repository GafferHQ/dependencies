/****************************************************************************
**
** Copyright (C) 2014 basysKom GmbH, author Bernd Lamecker <bernd.lamecker@basyskom.com>
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtWebChannel module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example chatclient-html
    \title Qt WebChannel Chatclient HTML Example
    \ingroup qtwebchannel-examples
    \brief A HTML/JavaScript client that communicates over a WebSocket with a QWebChannel server.

    The chatclient-html example provides a simple QWebChannel client implemented using JavaScript and HTML.

    \section1 Overview

    The client initializes a WebSocket connection to the chat server and receives an object
    containing all neccessarry signals, slots and properties for implementing a chat client.

    After login the client can invoke the method \c sendMessage and receive the signal \c newMessage
    to send and receive messages. Furthermore there is a \c userList property which provides the
    names of all other connected clients. It is automatically updated when its contents change.
    Also, the client responds to the servers keep alive signal which is needed to detect disconnected
    clients and remove them from the \c userlist property.

    The example shows how basic elements can be used with the client JavaScript implementation of
    QWebChannel, like connecting to signals (\c newMessage), calling slots (\c sendMessage) and handle
    property changes (\c userList).

    The client is able to work with the chatserver-cpp example.

    To run the example, open the \c chatclient.html in a browser.

    \sa {chatserver-cpp}, {chatclient-qml}

*/
