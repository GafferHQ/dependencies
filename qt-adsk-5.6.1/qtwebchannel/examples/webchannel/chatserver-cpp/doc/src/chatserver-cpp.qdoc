/****************************************************************************
**
** Copyright (C) 2014 basysKom GmbH, author Bernd Lamecker <bernd.lamecker@basyskom.com>
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtWebChannel module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example chatserver-cpp
    \title Qt WebChannel Chatserver Example
    \ingroup qtwebchannel-examples
    \brief Shows how to use the QWebChannel C++ API to implement a simple chat server

    The chatserver examples provides a chat service that client examples can connect to.

    \section1 Overview

    The C++ application implements a QObject which provides all mechanisms required for
    a chat service.
    This object is published through a QWebChannel which uses a WebSocket as transport.

    The server provides a basic \c login method (username only, no passwords), which must be
    successfully invoked before a client is able to chat.
    After login a client can invoke the method \c sendMessage and receive the signal \c newMessage
    to write and receive messages. Furthermore there is a \c userList property which provides
    the names of all other connected clients.
    Additionally the server sends a keepAlive signal periodically to all clients. The clients
    have to respond to this signal, otherwise the client will be removed from the \c userList property.

    The example shows how basic QObject elements can be used with QWebChannel, i.e. signals
    (\c newMessage), slots (\c sendMessage) and properties (\c userList).

    Because this is a plain server application, there are separated clients needed to interact
    with the server. Both examples chatclient-qml and chatclient-html show a client implementation
    compatible with this server.

*/
