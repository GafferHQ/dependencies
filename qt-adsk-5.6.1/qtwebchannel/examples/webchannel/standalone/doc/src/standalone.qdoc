/****************************************************************************
**
** Copyright (C) 2014 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Milian Wolff <milian.wolff@kdab.com>
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtWebChannel module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example standalone
    \title Qt WebChannel Standalone Example
    \ingroup qtwebchannel-examples
    \image standalone-screenshot.png
    \brief Shows how to use the QWebChannel C++ API to communicate with an external client.

    The standalone example is a simple chat between a C++ application and a remote HTML
    client running in your default browser.

    \include examples-run.qdocinc

    \section1 Overview

    The C++ application sets up a QWebChannel instance and publishes a Dialog object over it.
    For the remote client side, \l {standalone/index.html}{index.html} is opened. Both show a
    dialog with the list of received messages and an input box to send messages to the other end.

    The Dialog emits the Dialog::sendText() signal when the user sends a message. The signal
    automatically gets propagated to the HTML client. When the user enters a message on the HTML
    side, Dialog::receiveText() is called.

    All communication between the HTML client and the C++ server is done over a WebSocket.
    The C++ side instantiates a QWebSocketServer and wraps incoming QWebSocket connections
    in WebSocketTransport objects, which implement QWebChannelAbstractTransport. These objects are
    then connected to the QWebChannel instance.

    \sa {Qt WebChannel JavaScript API}
*/
