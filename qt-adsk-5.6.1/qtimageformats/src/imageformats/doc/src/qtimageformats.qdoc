/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Image Formats module.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\title Qt Image Formats
\page qtimageformats-index.html
\brief Qt Image Formats module provides support for extra image file formats

The core Qt Gui library by default supports reading and writing image
files of the most common file formats: \c PNG, \c JPEG, \c BMP, \c GIF
and a few more, ref. \l {QImage#Reading and Writing Image Files}{Reading
and Writing Image Files}. The Qt Image Formats add-on module provides
optional support for other image file formats.

The file format support is provided transparently, through plugins for
Qt's image I/O system. As such, this module provides no API of its
own. Instead, the functionality is accessed in the same way as other
image I/O in Qt: through QImage::load() and QImage::save(). Or, for
more detailed control, through QImageReader and QImageWriter.

\section1 The Image I/O Plugins

The actual coding and decoding of the file format is done by a codec
library. The codec can be Qt or third party code. In case of a third
party codec, the build process will look for it among the system
libraries. If not found, it may fall back on using a bundled copy (in
\c src/3rdparty).

\table
\header \li Format \li Description                      \li Support      \li 3rd party codec
\row    \li DDS    \li Direct Draw Surface              \li Read/write   \li No
\row    \li ICNS   \li Apple Icon Image                 \li Read/write   \li No
\row    \li JP2    \li Joint Photographic Experts Group 2000 \li Read/write   \li Yes (bundled)
\row    \li MNG    \li Multiple-image Network Graphics  \li Read         \li Yes (bundled)
\row    \li TGA    \li Truevision Graphics Adapter      \li Read         \li No
\row    \li TIFF   \li Tagged Image File Format         \li Read/write   \li Yes (bundled)
\row    \li WBMP   \li Wireless Bitmap                  \li Read/write   \li No
\row    \li WEBP   \li WebP                             \li Read/write   \li Yes (bundled)
\endtable

\section2 Deployment

When built, the Qt Image Formats plugins are located as dynamic
libraries in the runtime plugin directory (typically \c
plugins/imageformats), together with the default image format
plugins. They may be deployed to the target system in the same way as
other plugins, see the \l{Deploying Plugins} documentation.

\section2 Security considerations

Since these file formats are more rarely used, the codecs may be less
thoroughly debugged against potential security holes. As always, care
should be taken when creating applications that may be used to decode
uncontrolled data files.

*/
